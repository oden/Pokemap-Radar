// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Response.pb.h"
// @@protoc_insertion_point(imports)

@implementation ResponseRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ResponseRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PokemonIdIsValidValue(PokemonId value) {
  switch (value) {
    case PokemonIdMissingno:
    case PokemonIdBulbasaur:
    case PokemonIdIvysaur:
    case PokemonIdVenusaur:
    case PokemonIdCharmender:
    case PokemonIdCharmeleon:
    case PokemonIdCharizard:
    case PokemonIdSquirtle:
    case PokemonIdWartortle:
    case PokemonIdBlastoise:
    case PokemonIdCaterpie:
    case PokemonIdMetapod:
    case PokemonIdButterfree:
    case PokemonIdWeedle:
    case PokemonIdKakuna:
    case PokemonIdBeedrill:
    case PokemonIdPidgey:
    case PokemonIdPidgeotto:
    case PokemonIdPidgeot:
    case PokemonIdRattata:
    case PokemonIdRaticate:
    case PokemonIdSpearow:
    case PokemonIdFearow:
    case PokemonIdEkans:
    case PokemonIdArbok:
    case PokemonIdPikachu:
    case PokemonIdRaichu:
    case PokemonIdSandshrew:
    case PokemonIdSandlash:
    case PokemonIdNidoranFemale:
    case PokemonIdNidorina:
    case PokemonIdNidoqueen:
    case PokemonIdNidoranMale:
    case PokemonIdNidorino:
    case PokemonIdNidoking:
    case PokemonIdClefary:
    case PokemonIdClefable:
    case PokemonIdVulpix:
    case PokemonIdNinetales:
    case PokemonIdJigglypuff:
    case PokemonIdWigglytuff:
    case PokemonIdZubat:
    case PokemonIdGolbat:
    case PokemonIdOddish:
    case PokemonIdGloom:
    case PokemonIdVileplume:
    case PokemonIdParas:
    case PokemonIdParasect:
    case PokemonIdVenonat:
    case PokemonIdVenomoth:
    case PokemonIdDiglett:
    case PokemonIdDugtrio:
    case PokemonIdMeowth:
    case PokemonIdPersian:
    case PokemonIdPsyduck:
    case PokemonIdGolduck:
    case PokemonIdMankey:
    case PokemonIdPrimeape:
    case PokemonIdGrowlithe:
    case PokemonIdArcanine:
    case PokemonIdPoliwag:
    case PokemonIdPoliwhirl:
    case PokemonIdPoliwrath:
    case PokemonIdAbra:
    case PokemonIdKadabra:
    case PokemonIdAlakhazam:
    case PokemonIdMachop:
    case PokemonIdMachoke:
    case PokemonIdMachamp:
    case PokemonIdBellsprout:
    case PokemonIdWeepinbell:
    case PokemonIdVictreebell:
    case PokemonIdTentacool:
    case PokemonIdTentacruel:
    case PokemonIdGeoduge:
    case PokemonIdGraveler:
    case PokemonIdGolem:
    case PokemonIdPonyta:
    case PokemonIdRapidash:
    case PokemonIdSlowpoke:
    case PokemonIdSlowbro:
    case PokemonIdMagnemite:
    case PokemonIdMagneton:
    case PokemonIdFarfetchd:
    case PokemonIdDoduo:
    case PokemonIdDodrio:
    case PokemonIdSeel:
    case PokemonIdDewgong:
    case PokemonIdGrimer:
    case PokemonIdMuk:
    case PokemonIdShellder:
    case PokemonIdCloyster:
    case PokemonIdGastly:
    case PokemonIdHaunter:
    case PokemonIdGengar:
    case PokemonIdOnix:
    case PokemonIdDrowzee:
    case PokemonIdHypno:
    case PokemonIdKrabby:
    case PokemonIdKingler:
    case PokemonIdVoltorb:
    case PokemonIdElectrode:
    case PokemonIdExeggcute:
    case PokemonIdExeggutor:
    case PokemonIdCubone:
    case PokemonIdMarowak:
    case PokemonIdHitmonlee:
    case PokemonIdHitmonchan:
    case PokemonIdLickitung:
    case PokemonIdKoffing:
    case PokemonIdWeezing:
    case PokemonIdRhyhorn:
    case PokemonIdRhydon:
    case PokemonIdChansey:
    case PokemonIdTangela:
    case PokemonIdKangaskhan:
    case PokemonIdHorsea:
    case PokemonIdSeadra:
    case PokemonIdGoldeen:
    case PokemonIdSeaking:
    case PokemonIdStaryu:
    case PokemonIdStarmie:
    case PokemonIdMrMime:
    case PokemonIdScyther:
    case PokemonIdJynx:
    case PokemonIdElectabuzz:
    case PokemonIdMagmar:
    case PokemonIdPinsir:
    case PokemonIdTauros:
    case PokemonIdMagikarp:
    case PokemonIdGyarados:
    case PokemonIdLapras:
    case PokemonIdDitto:
    case PokemonIdEevee:
    case PokemonIdVaporeon:
    case PokemonIdJolteon:
    case PokemonIdFlareon:
    case PokemonIdPorygon:
    case PokemonIdOmanyte:
    case PokemonIdOmastar:
    case PokemonIdKabuto:
    case PokemonIdKabutops:
    case PokemonIdAerodactyl:
    case PokemonIdSnorlax:
    case PokemonIdArticuno:
    case PokemonIdZapdos:
    case PokemonIdMoltres:
    case PokemonIdDratini:
    case PokemonIdDragonair:
    case PokemonIdDragonite:
    case PokemonIdMewtwo:
    case PokemonIdMew:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPokemonId(PokemonId value) {
  switch (value) {
    case PokemonIdMissingno:
      return @"PokemonIdMissingno";
    case PokemonIdBulbasaur:
      return @"PokemonIdBulbasaur";
    case PokemonIdIvysaur:
      return @"PokemonIdIvysaur";
    case PokemonIdVenusaur:
      return @"PokemonIdVenusaur";
    case PokemonIdCharmender:
      return @"PokemonIdCharmender";
    case PokemonIdCharmeleon:
      return @"PokemonIdCharmeleon";
    case PokemonIdCharizard:
      return @"PokemonIdCharizard";
    case PokemonIdSquirtle:
      return @"PokemonIdSquirtle";
    case PokemonIdWartortle:
      return @"PokemonIdWartortle";
    case PokemonIdBlastoise:
      return @"PokemonIdBlastoise";
    case PokemonIdCaterpie:
      return @"PokemonIdCaterpie";
    case PokemonIdMetapod:
      return @"PokemonIdMetapod";
    case PokemonIdButterfree:
      return @"PokemonIdButterfree";
    case PokemonIdWeedle:
      return @"PokemonIdWeedle";
    case PokemonIdKakuna:
      return @"PokemonIdKakuna";
    case PokemonIdBeedrill:
      return @"PokemonIdBeedrill";
    case PokemonIdPidgey:
      return @"PokemonIdPidgey";
    case PokemonIdPidgeotto:
      return @"PokemonIdPidgeotto";
    case PokemonIdPidgeot:
      return @"PokemonIdPidgeot";
    case PokemonIdRattata:
      return @"PokemonIdRattata";
    case PokemonIdRaticate:
      return @"PokemonIdRaticate";
    case PokemonIdSpearow:
      return @"PokemonIdSpearow";
    case PokemonIdFearow:
      return @"PokemonIdFearow";
    case PokemonIdEkans:
      return @"PokemonIdEkans";
    case PokemonIdArbok:
      return @"PokemonIdArbok";
    case PokemonIdPikachu:
      return @"PokemonIdPikachu";
    case PokemonIdRaichu:
      return @"PokemonIdRaichu";
    case PokemonIdSandshrew:
      return @"PokemonIdSandshrew";
    case PokemonIdSandlash:
      return @"PokemonIdSandlash";
    case PokemonIdNidoranFemale:
      return @"PokemonIdNidoranFemale";
    case PokemonIdNidorina:
      return @"PokemonIdNidorina";
    case PokemonIdNidoqueen:
      return @"PokemonIdNidoqueen";
    case PokemonIdNidoranMale:
      return @"PokemonIdNidoranMale";
    case PokemonIdNidorino:
      return @"PokemonIdNidorino";
    case PokemonIdNidoking:
      return @"PokemonIdNidoking";
    case PokemonIdClefary:
      return @"PokemonIdClefary";
    case PokemonIdClefable:
      return @"PokemonIdClefable";
    case PokemonIdVulpix:
      return @"PokemonIdVulpix";
    case PokemonIdNinetales:
      return @"PokemonIdNinetales";
    case PokemonIdJigglypuff:
      return @"PokemonIdJigglypuff";
    case PokemonIdWigglytuff:
      return @"PokemonIdWigglytuff";
    case PokemonIdZubat:
      return @"PokemonIdZubat";
    case PokemonIdGolbat:
      return @"PokemonIdGolbat";
    case PokemonIdOddish:
      return @"PokemonIdOddish";
    case PokemonIdGloom:
      return @"PokemonIdGloom";
    case PokemonIdVileplume:
      return @"PokemonIdVileplume";
    case PokemonIdParas:
      return @"PokemonIdParas";
    case PokemonIdParasect:
      return @"PokemonIdParasect";
    case PokemonIdVenonat:
      return @"PokemonIdVenonat";
    case PokemonIdVenomoth:
      return @"PokemonIdVenomoth";
    case PokemonIdDiglett:
      return @"PokemonIdDiglett";
    case PokemonIdDugtrio:
      return @"PokemonIdDugtrio";
    case PokemonIdMeowth:
      return @"PokemonIdMeowth";
    case PokemonIdPersian:
      return @"PokemonIdPersian";
    case PokemonIdPsyduck:
      return @"PokemonIdPsyduck";
    case PokemonIdGolduck:
      return @"PokemonIdGolduck";
    case PokemonIdMankey:
      return @"PokemonIdMankey";
    case PokemonIdPrimeape:
      return @"PokemonIdPrimeape";
    case PokemonIdGrowlithe:
      return @"PokemonIdGrowlithe";
    case PokemonIdArcanine:
      return @"PokemonIdArcanine";
    case PokemonIdPoliwag:
      return @"PokemonIdPoliwag";
    case PokemonIdPoliwhirl:
      return @"PokemonIdPoliwhirl";
    case PokemonIdPoliwrath:
      return @"PokemonIdPoliwrath";
    case PokemonIdAbra:
      return @"PokemonIdAbra";
    case PokemonIdKadabra:
      return @"PokemonIdKadabra";
    case PokemonIdAlakhazam:
      return @"PokemonIdAlakhazam";
    case PokemonIdMachop:
      return @"PokemonIdMachop";
    case PokemonIdMachoke:
      return @"PokemonIdMachoke";
    case PokemonIdMachamp:
      return @"PokemonIdMachamp";
    case PokemonIdBellsprout:
      return @"PokemonIdBellsprout";
    case PokemonIdWeepinbell:
      return @"PokemonIdWeepinbell";
    case PokemonIdVictreebell:
      return @"PokemonIdVictreebell";
    case PokemonIdTentacool:
      return @"PokemonIdTentacool";
    case PokemonIdTentacruel:
      return @"PokemonIdTentacruel";
    case PokemonIdGeoduge:
      return @"PokemonIdGeoduge";
    case PokemonIdGraveler:
      return @"PokemonIdGraveler";
    case PokemonIdGolem:
      return @"PokemonIdGolem";
    case PokemonIdPonyta:
      return @"PokemonIdPonyta";
    case PokemonIdRapidash:
      return @"PokemonIdRapidash";
    case PokemonIdSlowpoke:
      return @"PokemonIdSlowpoke";
    case PokemonIdSlowbro:
      return @"PokemonIdSlowbro";
    case PokemonIdMagnemite:
      return @"PokemonIdMagnemite";
    case PokemonIdMagneton:
      return @"PokemonIdMagneton";
    case PokemonIdFarfetchd:
      return @"PokemonIdFarfetchd";
    case PokemonIdDoduo:
      return @"PokemonIdDoduo";
    case PokemonIdDodrio:
      return @"PokemonIdDodrio";
    case PokemonIdSeel:
      return @"PokemonIdSeel";
    case PokemonIdDewgong:
      return @"PokemonIdDewgong";
    case PokemonIdGrimer:
      return @"PokemonIdGrimer";
    case PokemonIdMuk:
      return @"PokemonIdMuk";
    case PokemonIdShellder:
      return @"PokemonIdShellder";
    case PokemonIdCloyster:
      return @"PokemonIdCloyster";
    case PokemonIdGastly:
      return @"PokemonIdGastly";
    case PokemonIdHaunter:
      return @"PokemonIdHaunter";
    case PokemonIdGengar:
      return @"PokemonIdGengar";
    case PokemonIdOnix:
      return @"PokemonIdOnix";
    case PokemonIdDrowzee:
      return @"PokemonIdDrowzee";
    case PokemonIdHypno:
      return @"PokemonIdHypno";
    case PokemonIdKrabby:
      return @"PokemonIdKrabby";
    case PokemonIdKingler:
      return @"PokemonIdKingler";
    case PokemonIdVoltorb:
      return @"PokemonIdVoltorb";
    case PokemonIdElectrode:
      return @"PokemonIdElectrode";
    case PokemonIdExeggcute:
      return @"PokemonIdExeggcute";
    case PokemonIdExeggutor:
      return @"PokemonIdExeggutor";
    case PokemonIdCubone:
      return @"PokemonIdCubone";
    case PokemonIdMarowak:
      return @"PokemonIdMarowak";
    case PokemonIdHitmonlee:
      return @"PokemonIdHitmonlee";
    case PokemonIdHitmonchan:
      return @"PokemonIdHitmonchan";
    case PokemonIdLickitung:
      return @"PokemonIdLickitung";
    case PokemonIdKoffing:
      return @"PokemonIdKoffing";
    case PokemonIdWeezing:
      return @"PokemonIdWeezing";
    case PokemonIdRhyhorn:
      return @"PokemonIdRhyhorn";
    case PokemonIdRhydon:
      return @"PokemonIdRhydon";
    case PokemonIdChansey:
      return @"PokemonIdChansey";
    case PokemonIdTangela:
      return @"PokemonIdTangela";
    case PokemonIdKangaskhan:
      return @"PokemonIdKangaskhan";
    case PokemonIdHorsea:
      return @"PokemonIdHorsea";
    case PokemonIdSeadra:
      return @"PokemonIdSeadra";
    case PokemonIdGoldeen:
      return @"PokemonIdGoldeen";
    case PokemonIdSeaking:
      return @"PokemonIdSeaking";
    case PokemonIdStaryu:
      return @"PokemonIdStaryu";
    case PokemonIdStarmie:
      return @"PokemonIdStarmie";
    case PokemonIdMrMime:
      return @"PokemonIdMrMime";
    case PokemonIdScyther:
      return @"PokemonIdScyther";
    case PokemonIdJynx:
      return @"PokemonIdJynx";
    case PokemonIdElectabuzz:
      return @"PokemonIdElectabuzz";
    case PokemonIdMagmar:
      return @"PokemonIdMagmar";
    case PokemonIdPinsir:
      return @"PokemonIdPinsir";
    case PokemonIdTauros:
      return @"PokemonIdTauros";
    case PokemonIdMagikarp:
      return @"PokemonIdMagikarp";
    case PokemonIdGyarados:
      return @"PokemonIdGyarados";
    case PokemonIdLapras:
      return @"PokemonIdLapras";
    case PokemonIdDitto:
      return @"PokemonIdDitto";
    case PokemonIdEevee:
      return @"PokemonIdEevee";
    case PokemonIdVaporeon:
      return @"PokemonIdVaporeon";
    case PokemonIdJolteon:
      return @"PokemonIdJolteon";
    case PokemonIdFlareon:
      return @"PokemonIdFlareon";
    case PokemonIdPorygon:
      return @"PokemonIdPorygon";
    case PokemonIdOmanyte:
      return @"PokemonIdOmanyte";
    case PokemonIdOmastar:
      return @"PokemonIdOmastar";
    case PokemonIdKabuto:
      return @"PokemonIdKabuto";
    case PokemonIdKabutops:
      return @"PokemonIdKabutops";
    case PokemonIdAerodactyl:
      return @"PokemonIdAerodactyl";
    case PokemonIdSnorlax:
      return @"PokemonIdSnorlax";
    case PokemonIdArticuno:
      return @"PokemonIdArticuno";
    case PokemonIdZapdos:
      return @"PokemonIdZapdos";
    case PokemonIdMoltres:
      return @"PokemonIdMoltres";
    case PokemonIdDratini:
      return @"PokemonIdDratini";
    case PokemonIdDragonair:
      return @"PokemonIdDragonair";
    case PokemonIdDragonite:
      return @"PokemonIdDragonite";
    case PokemonIdMewtwo:
      return @"PokemonIdMewtwo";
    case PokemonIdMew:
      return @"PokemonIdMew";
    default:
      return nil;
  }
}

@interface ResponseEnvelope ()
@property SInt32 statusCode;
@property UInt64 requestId;
@property (strong) NSString* apiUrl;
@property (strong) ResponseEnvelopeUnknown6* unknown6;
@property (strong) ResponseAuthTicket* authTicket;
@property (strong) NSMutableArray * returnsArray;
@property (strong) NSString* error;
@end

@implementation ResponseEnvelope

- (BOOL) hasStatusCode {
  return !!hasStatusCode_;
}
- (void) setHasStatusCode:(BOOL) _value_ {
  hasStatusCode_ = !!_value_;
}
@synthesize statusCode;
- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) _value_ {
  hasRequestId_ = !!_value_;
}
@synthesize requestId;
- (BOOL) hasApiUrl {
  return !!hasApiUrl_;
}
- (void) setHasApiUrl:(BOOL) _value_ {
  hasApiUrl_ = !!_value_;
}
@synthesize apiUrl;
- (BOOL) hasUnknown6 {
  return !!hasUnknown6_;
}
- (void) setHasUnknown6:(BOOL) _value_ {
  hasUnknown6_ = !!_value_;
}
@synthesize unknown6;
- (BOOL) hasAuthTicket {
  return !!hasAuthTicket_;
}
- (void) setHasAuthTicket:(BOOL) _value_ {
  hasAuthTicket_ = !!_value_;
}
@synthesize authTicket;
@synthesize returnsArray;
@dynamic returns;
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) _value_ {
  hasError_ = !!_value_;
}
@synthesize error;
- (instancetype) init {
  if ((self = [super init])) {
    self.statusCode = 0;
    self.requestId = 0L;
    self.apiUrl = @"";
    self.unknown6 = [ResponseEnvelopeUnknown6 defaultInstance];
    self.authTicket = [ResponseAuthTicket defaultInstance];
    self.error = @"";
  }
  return self;
}
static ResponseEnvelope* defaultResponseEnvelopeInstance = nil;
+ (void) initialize {
  if (self == [ResponseEnvelope class]) {
    defaultResponseEnvelopeInstance = [[ResponseEnvelope alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseEnvelopeInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseEnvelopeInstance;
}
- (NSArray *)returns {
  return returnsArray;
}
- (NSData*)returnsAtIndex:(NSUInteger)index {
  return [returnsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasUnknown6) {
    if (!self.unknown6.isInitialized) {
      return NO;
    }
  }
  if (self.hasAuthTicket) {
    if (!self.authTicket.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatusCode) {
    [output writeInt32:1 value:self.statusCode];
  }
  if (self.hasRequestId) {
    [output writeUInt64:2 value:self.requestId];
  }
  if (self.hasApiUrl) {
    [output writeString:3 value:self.apiUrl];
  }
  if (self.hasUnknown6) {
    [output writeMessage:6 value:self.unknown6];
  }
  if (self.hasAuthTicket) {
    [output writeMessage:7 value:self.authTicket];
  }
  [self.returnsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:100 value:element];
  }];
  if (self.hasError) {
    [output writeString:101 value:self.error];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatusCode) {
    size_ += computeInt32Size(1, self.statusCode);
  }
  if (self.hasRequestId) {
    size_ += computeUInt64Size(2, self.requestId);
  }
  if (self.hasApiUrl) {
    size_ += computeStringSize(3, self.apiUrl);
  }
  if (self.hasUnknown6) {
    size_ += computeMessageSize(6, self.unknown6);
  }
  if (self.hasAuthTicket) {
    size_ += computeMessageSize(7, self.authTicket);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.returnsArray.count;
    [self.returnsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasError) {
    size_ += computeStringSize(101, self.error);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseEnvelope*) parseFromData:(NSData*) data {
  return (ResponseEnvelope*)[[[ResponseEnvelope builder] mergeFromData:data] build];
}
+ (ResponseEnvelope*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelope*)[[[ResponseEnvelope builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelope*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseEnvelope*)[[[ResponseEnvelope builder] mergeFromInputStream:input] build];
}
+ (ResponseEnvelope*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelope*)[[[ResponseEnvelope builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelope*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseEnvelope*)[[[ResponseEnvelope builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseEnvelope*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelope*)[[[ResponseEnvelope builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeBuilder*) builder {
  return [[ResponseEnvelopeBuilder alloc] init];
}
+ (ResponseEnvelopeBuilder*) builderWithPrototype:(ResponseEnvelope*) prototype {
  return [[ResponseEnvelope builder] mergeFrom:prototype];
}
- (ResponseEnvelopeBuilder*) builder {
  return [ResponseEnvelope builder];
}
- (ResponseEnvelopeBuilder*) toBuilder {
  return [ResponseEnvelope builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatusCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusCode", [NSNumber numberWithInteger:self.statusCode]];
  }
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithLongLong:self.requestId]];
  }
  if (self.hasApiUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"apiUrl", self.apiUrl];
  }
  if (self.hasUnknown6) {
    [output appendFormat:@"%@%@ {\n", indent, @"unknown6"];
    [self.unknown6 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAuthTicket) {
    [output appendFormat:@"%@%@ {\n", indent, @"authTicket"];
    [self.authTicket writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.returnsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"returns", obj];
  }];
  if (self.hasError) {
    [output appendFormat:@"%@%@: %@\n", indent, @"error", self.error];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatusCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.statusCode] forKey: @"statusCode"];
  }
  if (self.hasRequestId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.requestId] forKey: @"requestId"];
  }
  if (self.hasApiUrl) {
    [dictionary setObject: self.apiUrl forKey: @"apiUrl"];
  }
  if (self.hasUnknown6) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.unknown6 storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"unknown6"];
  }
  if (self.hasAuthTicket) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.authTicket storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"authTicket"];
  }
  [dictionary setObject:self.returns forKey: @"returns"];
  if (self.hasError) {
    [dictionary setObject: self.error forKey: @"error"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseEnvelope class]]) {
    return NO;
  }
  ResponseEnvelope *otherMessage = other;
  return
      self.hasStatusCode == otherMessage.hasStatusCode &&
      (!self.hasStatusCode || self.statusCode == otherMessage.statusCode) &&
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasApiUrl == otherMessage.hasApiUrl &&
      (!self.hasApiUrl || [self.apiUrl isEqual:otherMessage.apiUrl]) &&
      self.hasUnknown6 == otherMessage.hasUnknown6 &&
      (!self.hasUnknown6 || [self.unknown6 isEqual:otherMessage.unknown6]) &&
      self.hasAuthTicket == otherMessage.hasAuthTicket &&
      (!self.hasAuthTicket || [self.authTicket isEqual:otherMessage.authTicket]) &&
      [self.returnsArray isEqualToArray:otherMessage.returnsArray] &&
      self.hasError == otherMessage.hasError &&
      (!self.hasError || [self.error isEqual:otherMessage.error]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatusCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.statusCode] hash];
  }
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.requestId] hash];
  }
  if (self.hasApiUrl) {
    hashCode = hashCode * 31 + [self.apiUrl hash];
  }
  if (self.hasUnknown6) {
    hashCode = hashCode * 31 + [self.unknown6 hash];
  }
  if (self.hasAuthTicket) {
    hashCode = hashCode * 31 + [self.authTicket hash];
  }
  [self.returnsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasError) {
    hashCode = hashCode * 31 + [self.error hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseEnvelopeUnknown7 ()
@property (strong) NSData* unknown71;
@property SInt64 unknown72;
@property (strong) NSData* unknown73;
@end

@implementation ResponseEnvelopeUnknown7

- (BOOL) hasUnknown71 {
  return !!hasUnknown71_;
}
- (void) setHasUnknown71:(BOOL) _value_ {
  hasUnknown71_ = !!_value_;
}
@synthesize unknown71;
- (BOOL) hasUnknown72 {
  return !!hasUnknown72_;
}
- (void) setHasUnknown72:(BOOL) _value_ {
  hasUnknown72_ = !!_value_;
}
@synthesize unknown72;
- (BOOL) hasUnknown73 {
  return !!hasUnknown73_;
}
- (void) setHasUnknown73:(BOOL) _value_ {
  hasUnknown73_ = !!_value_;
}
@synthesize unknown73;
- (instancetype) init {
  if ((self = [super init])) {
    self.unknown71 = [NSData data];
    self.unknown72 = 0L;
    self.unknown73 = [NSData data];
  }
  return self;
}
static ResponseEnvelopeUnknown7* defaultResponseEnvelopeUnknown7Instance = nil;
+ (void) initialize {
  if (self == [ResponseEnvelopeUnknown7 class]) {
    defaultResponseEnvelopeUnknown7Instance = [[ResponseEnvelopeUnknown7 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseEnvelopeUnknown7Instance;
}
- (instancetype) defaultInstance {
  return defaultResponseEnvelopeUnknown7Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUnknown71) {
    [output writeData:1 value:self.unknown71];
  }
  if (self.hasUnknown72) {
    [output writeInt64:2 value:self.unknown72];
  }
  if (self.hasUnknown73) {
    [output writeData:3 value:self.unknown73];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUnknown71) {
    size_ += computeDataSize(1, self.unknown71);
  }
  if (self.hasUnknown72) {
    size_ += computeInt64Size(2, self.unknown72);
  }
  if (self.hasUnknown73) {
    size_ += computeDataSize(3, self.unknown73);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseEnvelopeUnknown7*) parseFromData:(NSData*) data {
  return (ResponseEnvelopeUnknown7*)[[[ResponseEnvelopeUnknown7 builder] mergeFromData:data] build];
}
+ (ResponseEnvelopeUnknown7*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown7*)[[[ResponseEnvelopeUnknown7 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown7*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseEnvelopeUnknown7*)[[[ResponseEnvelopeUnknown7 builder] mergeFromInputStream:input] build];
}
+ (ResponseEnvelopeUnknown7*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown7*)[[[ResponseEnvelopeUnknown7 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown7*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseEnvelopeUnknown7*)[[[ResponseEnvelopeUnknown7 builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseEnvelopeUnknown7*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown7*)[[[ResponseEnvelopeUnknown7 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown7Builder*) builder {
  return [[ResponseEnvelopeUnknown7Builder alloc] init];
}
+ (ResponseEnvelopeUnknown7Builder*) builderWithPrototype:(ResponseEnvelopeUnknown7*) prototype {
  return [[ResponseEnvelopeUnknown7 builder] mergeFrom:prototype];
}
- (ResponseEnvelopeUnknown7Builder*) builder {
  return [ResponseEnvelopeUnknown7 builder];
}
- (ResponseEnvelopeUnknown7Builder*) toBuilder {
  return [ResponseEnvelopeUnknown7 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUnknown71) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown71", self.unknown71];
  }
  if (self.hasUnknown72) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown72", [NSNumber numberWithLongLong:self.unknown72]];
  }
  if (self.hasUnknown73) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown73", self.unknown73];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUnknown71) {
    [dictionary setObject: self.unknown71 forKey: @"unknown71"];
  }
  if (self.hasUnknown72) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.unknown72] forKey: @"unknown72"];
  }
  if (self.hasUnknown73) {
    [dictionary setObject: self.unknown73 forKey: @"unknown73"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseEnvelopeUnknown7 class]]) {
    return NO;
  }
  ResponseEnvelopeUnknown7 *otherMessage = other;
  return
      self.hasUnknown71 == otherMessage.hasUnknown71 &&
      (!self.hasUnknown71 || [self.unknown71 isEqual:otherMessage.unknown71]) &&
      self.hasUnknown72 == otherMessage.hasUnknown72 &&
      (!self.hasUnknown72 || self.unknown72 == otherMessage.unknown72) &&
      self.hasUnknown73 == otherMessage.hasUnknown73 &&
      (!self.hasUnknown73 || [self.unknown73 isEqual:otherMessage.unknown73]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUnknown71) {
    hashCode = hashCode * 31 + [self.unknown71 hash];
  }
  if (self.hasUnknown72) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.unknown72] hash];
  }
  if (self.hasUnknown73) {
    hashCode = hashCode * 31 + [self.unknown73 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseEnvelopeUnknown7Builder()
@property (strong) ResponseEnvelopeUnknown7* resultUnknown7;
@end

@implementation ResponseEnvelopeUnknown7Builder
@synthesize resultUnknown7;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnknown7 = [[ResponseEnvelopeUnknown7 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnknown7;
}
- (ResponseEnvelopeUnknown7Builder*) clear {
  self.resultUnknown7 = [[ResponseEnvelopeUnknown7 alloc] init];
  return self;
}
- (ResponseEnvelopeUnknown7Builder*) clone {
  return [ResponseEnvelopeUnknown7 builderWithPrototype:resultUnknown7];
}
- (ResponseEnvelopeUnknown7*) defaultInstance {
  return [ResponseEnvelopeUnknown7 defaultInstance];
}
- (ResponseEnvelopeUnknown7*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseEnvelopeUnknown7*) buildPartial {
  ResponseEnvelopeUnknown7* returnMe = resultUnknown7;
  self.resultUnknown7 = nil;
  return returnMe;
}
- (ResponseEnvelopeUnknown7Builder*) mergeFrom:(ResponseEnvelopeUnknown7*) other {
  if (other == [ResponseEnvelopeUnknown7 defaultInstance]) {
    return self;
  }
  if (other.hasUnknown71) {
    [self setUnknown71:other.unknown71];
  }
  if (other.hasUnknown72) {
    [self setUnknown72:other.unknown72];
  }
  if (other.hasUnknown73) {
    [self setUnknown73:other.unknown73];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseEnvelopeUnknown7Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseEnvelopeUnknown7Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUnknown71:[input readData]];
        break;
      }
      case 16: {
        [self setUnknown72:[input readInt64]];
        break;
      }
      case 26: {
        [self setUnknown73:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUnknown71 {
  return resultUnknown7.hasUnknown71;
}
- (NSData*) unknown71 {
  return resultUnknown7.unknown71;
}
- (ResponseEnvelopeUnknown7Builder*) setUnknown71:(NSData*) value {
  resultUnknown7.hasUnknown71 = YES;
  resultUnknown7.unknown71 = value;
  return self;
}
- (ResponseEnvelopeUnknown7Builder*) clearUnknown71 {
  resultUnknown7.hasUnknown71 = NO;
  resultUnknown7.unknown71 = [NSData data];
  return self;
}
- (BOOL) hasUnknown72 {
  return resultUnknown7.hasUnknown72;
}
- (SInt64) unknown72 {
  return resultUnknown7.unknown72;
}
- (ResponseEnvelopeUnknown7Builder*) setUnknown72:(SInt64) value {
  resultUnknown7.hasUnknown72 = YES;
  resultUnknown7.unknown72 = value;
  return self;
}
- (ResponseEnvelopeUnknown7Builder*) clearUnknown72 {
  resultUnknown7.hasUnknown72 = NO;
  resultUnknown7.unknown72 = 0L;
  return self;
}
- (BOOL) hasUnknown73 {
  return resultUnknown7.hasUnknown73;
}
- (NSData*) unknown73 {
  return resultUnknown7.unknown73;
}
- (ResponseEnvelopeUnknown7Builder*) setUnknown73:(NSData*) value {
  resultUnknown7.hasUnknown73 = YES;
  resultUnknown7.unknown73 = value;
  return self;
}
- (ResponseEnvelopeUnknown7Builder*) clearUnknown73 {
  resultUnknown7.hasUnknown73 = NO;
  resultUnknown7.unknown73 = [NSData data];
  return self;
}
@end

@interface ResponseEnvelopeBuilder()
@property (strong) ResponseEnvelope* resultResponseEnvelope;
@end

@implementation ResponseEnvelopeBuilder
@synthesize resultResponseEnvelope;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseEnvelope = [[ResponseEnvelope alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseEnvelope;
}
- (ResponseEnvelopeBuilder*) clear {
  self.resultResponseEnvelope = [[ResponseEnvelope alloc] init];
  return self;
}
- (ResponseEnvelopeBuilder*) clone {
  return [ResponseEnvelope builderWithPrototype:resultResponseEnvelope];
}
- (ResponseEnvelope*) defaultInstance {
  return [ResponseEnvelope defaultInstance];
}
- (ResponseEnvelope*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseEnvelope*) buildPartial {
  ResponseEnvelope* returnMe = resultResponseEnvelope;
  self.resultResponseEnvelope = nil;
  return returnMe;
}
- (ResponseEnvelopeBuilder*) mergeFrom:(ResponseEnvelope*) other {
  if (other == [ResponseEnvelope defaultInstance]) {
    return self;
  }
  if (other.hasStatusCode) {
    [self setStatusCode:other.statusCode];
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasApiUrl) {
    [self setApiUrl:other.apiUrl];
  }
  if (other.hasUnknown6) {
    [self mergeUnknown6:other.unknown6];
  }
  if (other.hasAuthTicket) {
    [self mergeAuthTicket:other.authTicket];
  }
  if (other.returnsArray.count > 0) {
    if (resultResponseEnvelope.returnsArray == nil) {
      resultResponseEnvelope.returnsArray = [[NSMutableArray alloc] initWithArray:other.returnsArray];
    } else {
      [resultResponseEnvelope.returnsArray addObjectsFromArray:other.returnsArray];
    }
  }
  if (other.hasError) {
    [self setError:other.error];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseEnvelopeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseEnvelopeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStatusCode:[input readInt32]];
        break;
      }
      case 16: {
        [self setRequestId:[input readUInt64]];
        break;
      }
      case 26: {
        [self setApiUrl:[input readString]];
        break;
      }
      case 50: {
        ResponseEnvelopeUnknown6Builder* subBuilder = [ResponseEnvelopeUnknown6 builder];
        if (self.hasUnknown6) {
          [subBuilder mergeFrom:self.unknown6];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnknown6:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        ResponseAuthTicketBuilder* subBuilder = [ResponseAuthTicket builder];
        if (self.hasAuthTicket) {
          [subBuilder mergeFrom:self.authTicket];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthTicket:[subBuilder buildPartial]];
        break;
      }
      case 802: {
        [self addReturns:[input readData]];
        break;
      }
      case 810: {
        [self setError:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatusCode {
  return resultResponseEnvelope.hasStatusCode;
}
- (SInt32) statusCode {
  return resultResponseEnvelope.statusCode;
}
- (ResponseEnvelopeBuilder*) setStatusCode:(SInt32) value {
  resultResponseEnvelope.hasStatusCode = YES;
  resultResponseEnvelope.statusCode = value;
  return self;
}
- (ResponseEnvelopeBuilder*) clearStatusCode {
  resultResponseEnvelope.hasStatusCode = NO;
  resultResponseEnvelope.statusCode = 0;
  return self;
}
- (BOOL) hasRequestId {
  return resultResponseEnvelope.hasRequestId;
}
- (UInt64) requestId {
  return resultResponseEnvelope.requestId;
}
- (ResponseEnvelopeBuilder*) setRequestId:(UInt64) value {
  resultResponseEnvelope.hasRequestId = YES;
  resultResponseEnvelope.requestId = value;
  return self;
}
- (ResponseEnvelopeBuilder*) clearRequestId {
  resultResponseEnvelope.hasRequestId = NO;
  resultResponseEnvelope.requestId = 0L;
  return self;
}
- (BOOL) hasApiUrl {
  return resultResponseEnvelope.hasApiUrl;
}
- (NSString*) apiUrl {
  return resultResponseEnvelope.apiUrl;
}
- (ResponseEnvelopeBuilder*) setApiUrl:(NSString*) value {
  resultResponseEnvelope.hasApiUrl = YES;
  resultResponseEnvelope.apiUrl = value;
  return self;
}
- (ResponseEnvelopeBuilder*) clearApiUrl {
  resultResponseEnvelope.hasApiUrl = NO;
  resultResponseEnvelope.apiUrl = @"";
  return self;
}
- (BOOL) hasUnknown6 {
  return resultResponseEnvelope.hasUnknown6;
}
- (ResponseEnvelopeUnknown6*) unknown6 {
  return resultResponseEnvelope.unknown6;
}
- (ResponseEnvelopeBuilder*) setUnknown6:(ResponseEnvelopeUnknown6*) value {
  resultResponseEnvelope.hasUnknown6 = YES;
  resultResponseEnvelope.unknown6 = value;
  return self;
}
- (ResponseEnvelopeBuilder*) setUnknown6Builder:(ResponseEnvelopeUnknown6Builder*) builderForValue {
  return [self setUnknown6:[builderForValue build]];
}
- (ResponseEnvelopeBuilder*) mergeUnknown6:(ResponseEnvelopeUnknown6*) value {
  if (resultResponseEnvelope.hasUnknown6 &&
      resultResponseEnvelope.unknown6 != [ResponseEnvelopeUnknown6 defaultInstance]) {
    resultResponseEnvelope.unknown6 =
      [[[ResponseEnvelopeUnknown6 builderWithPrototype:resultResponseEnvelope.unknown6] mergeFrom:value] buildPartial];
  } else {
    resultResponseEnvelope.unknown6 = value;
  }
  resultResponseEnvelope.hasUnknown6 = YES;
  return self;
}
- (ResponseEnvelopeBuilder*) clearUnknown6 {
  resultResponseEnvelope.hasUnknown6 = NO;
  resultResponseEnvelope.unknown6 = [ResponseEnvelopeUnknown6 defaultInstance];
  return self;
}
- (BOOL) hasAuthTicket {
  return resultResponseEnvelope.hasAuthTicket;
}
- (ResponseAuthTicket*) authTicket {
  return resultResponseEnvelope.authTicket;
}
- (ResponseEnvelopeBuilder*) setAuthTicket:(ResponseAuthTicket*) value {
  resultResponseEnvelope.hasAuthTicket = YES;
  resultResponseEnvelope.authTicket = value;
  return self;
}
- (ResponseEnvelopeBuilder*) setAuthTicketBuilder:(ResponseAuthTicketBuilder*) builderForValue {
  return [self setAuthTicket:[builderForValue build]];
}
- (ResponseEnvelopeBuilder*) mergeAuthTicket:(ResponseAuthTicket*) value {
  if (resultResponseEnvelope.hasAuthTicket &&
      resultResponseEnvelope.authTicket != [ResponseAuthTicket defaultInstance]) {
    resultResponseEnvelope.authTicket =
      [[[ResponseAuthTicket builderWithPrototype:resultResponseEnvelope.authTicket] mergeFrom:value] buildPartial];
  } else {
    resultResponseEnvelope.authTicket = value;
  }
  resultResponseEnvelope.hasAuthTicket = YES;
  return self;
}
- (ResponseEnvelopeBuilder*) clearAuthTicket {
  resultResponseEnvelope.hasAuthTicket = NO;
  resultResponseEnvelope.authTicket = [ResponseAuthTicket defaultInstance];
  return self;
}
- (NSMutableArray *)returns {
  return resultResponseEnvelope.returnsArray;
}
- (NSData*)returnsAtIndex:(NSUInteger)index {
  return [resultResponseEnvelope returnsAtIndex:index];
}
- (ResponseEnvelopeBuilder *)addReturns:(NSData*)value {
  if (resultResponseEnvelope.returnsArray == nil) {
    resultResponseEnvelope.returnsArray = [[NSMutableArray alloc]init];
  }
  [resultResponseEnvelope.returnsArray addObject:value];
  return self;
}
- (ResponseEnvelopeBuilder *)setReturnsArray:(NSArray *)array {
  resultResponseEnvelope.returnsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ResponseEnvelopeBuilder *)clearReturns {
  resultResponseEnvelope.returnsArray = nil;
  return self;
}
- (BOOL) hasError {
  return resultResponseEnvelope.hasError;
}
- (NSString*) error {
  return resultResponseEnvelope.error;
}
- (ResponseEnvelopeBuilder*) setError:(NSString*) value {
  resultResponseEnvelope.hasError = YES;
  resultResponseEnvelope.error = value;
  return self;
}
- (ResponseEnvelopeBuilder*) clearError {
  resultResponseEnvelope.hasError = NO;
  resultResponseEnvelope.error = @"";
  return self;
}
@end

@interface ResponseAuthTicket ()
@property (strong) NSData* start;
@property UInt64 expireTimestampMs;
@property (strong) NSData* end;
@end

@implementation ResponseAuthTicket

- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) _value_ {
  hasStart_ = !!_value_;
}
@synthesize start;
- (BOOL) hasExpireTimestampMs {
  return !!hasExpireTimestampMs_;
}
- (void) setHasExpireTimestampMs:(BOOL) _value_ {
  hasExpireTimestampMs_ = !!_value_;
}
@synthesize expireTimestampMs;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) _value_ {
  hasEnd_ = !!_value_;
}
@synthesize end;
- (instancetype) init {
  if ((self = [super init])) {
    self.start = [NSData data];
    self.expireTimestampMs = 0L;
    self.end = [NSData data];
  }
  return self;
}
static ResponseAuthTicket* defaultResponseAuthTicketInstance = nil;
+ (void) initialize {
  if (self == [ResponseAuthTicket class]) {
    defaultResponseAuthTicketInstance = [[ResponseAuthTicket alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseAuthTicketInstance;
}
- (instancetype) defaultInstance {
  return defaultResponseAuthTicketInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStart) {
    return NO;
  }
  if (!self.hasExpireTimestampMs) {
    return NO;
  }
  if (!self.hasEnd) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStart) {
    [output writeData:1 value:self.start];
  }
  if (self.hasExpireTimestampMs) {
    [output writeUInt64:2 value:self.expireTimestampMs];
  }
  if (self.hasEnd) {
    [output writeData:3 value:self.end];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStart) {
    size_ += computeDataSize(1, self.start);
  }
  if (self.hasExpireTimestampMs) {
    size_ += computeUInt64Size(2, self.expireTimestampMs);
  }
  if (self.hasEnd) {
    size_ += computeDataSize(3, self.end);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseAuthTicket*) parseFromData:(NSData*) data {
  return (ResponseAuthTicket*)[[[ResponseAuthTicket builder] mergeFromData:data] build];
}
+ (ResponseAuthTicket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseAuthTicket*)[[[ResponseAuthTicket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseAuthTicket*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseAuthTicket*)[[[ResponseAuthTicket builder] mergeFromInputStream:input] build];
}
+ (ResponseAuthTicket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseAuthTicket*)[[[ResponseAuthTicket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseAuthTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseAuthTicket*)[[[ResponseAuthTicket builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseAuthTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseAuthTicket*)[[[ResponseAuthTicket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseAuthTicketBuilder*) builder {
  return [[ResponseAuthTicketBuilder alloc] init];
}
+ (ResponseAuthTicketBuilder*) builderWithPrototype:(ResponseAuthTicket*) prototype {
  return [[ResponseAuthTicket builder] mergeFrom:prototype];
}
- (ResponseAuthTicketBuilder*) builder {
  return [ResponseAuthTicket builder];
}
- (ResponseAuthTicketBuilder*) toBuilder {
  return [ResponseAuthTicket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"start", self.start];
  }
  if (self.hasExpireTimestampMs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expireTimestampMs", [NSNumber numberWithLongLong:self.expireTimestampMs]];
  }
  if (self.hasEnd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"end", self.end];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStart) {
    [dictionary setObject: self.start forKey: @"start"];
  }
  if (self.hasExpireTimestampMs) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.expireTimestampMs] forKey: @"expireTimestampMs"];
  }
  if (self.hasEnd) {
    [dictionary setObject: self.end forKey: @"end"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseAuthTicket class]]) {
    return NO;
  }
  ResponseAuthTicket *otherMessage = other;
  return
      self.hasStart == otherMessage.hasStart &&
      (!self.hasStart || [self.start isEqual:otherMessage.start]) &&
      self.hasExpireTimestampMs == otherMessage.hasExpireTimestampMs &&
      (!self.hasExpireTimestampMs || self.expireTimestampMs == otherMessage.expireTimestampMs) &&
      self.hasEnd == otherMessage.hasEnd &&
      (!self.hasEnd || [self.end isEqual:otherMessage.end]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStart) {
    hashCode = hashCode * 31 + [self.start hash];
  }
  if (self.hasExpireTimestampMs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.expireTimestampMs] hash];
  }
  if (self.hasEnd) {
    hashCode = hashCode * 31 + [self.end hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseAuthTicketBuilder()
@property (strong) ResponseAuthTicket* resultResponseAuthTicket;
@end

@implementation ResponseAuthTicketBuilder
@synthesize resultResponseAuthTicket;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseAuthTicket = [[ResponseAuthTicket alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseAuthTicket;
}
- (ResponseAuthTicketBuilder*) clear {
  self.resultResponseAuthTicket = [[ResponseAuthTicket alloc] init];
  return self;
}
- (ResponseAuthTicketBuilder*) clone {
  return [ResponseAuthTicket builderWithPrototype:resultResponseAuthTicket];
}
- (ResponseAuthTicket*) defaultInstance {
  return [ResponseAuthTicket defaultInstance];
}
- (ResponseAuthTicket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseAuthTicket*) buildPartial {
  ResponseAuthTicket* returnMe = resultResponseAuthTicket;
  self.resultResponseAuthTicket = nil;
  return returnMe;
}
- (ResponseAuthTicketBuilder*) mergeFrom:(ResponseAuthTicket*) other {
  if (other == [ResponseAuthTicket defaultInstance]) {
    return self;
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasExpireTimestampMs) {
    [self setExpireTimestampMs:other.expireTimestampMs];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseAuthTicketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseAuthTicketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setStart:[input readData]];
        break;
      }
      case 16: {
        [self setExpireTimestampMs:[input readUInt64]];
        break;
      }
      case 26: {
        [self setEnd:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasStart {
  return resultResponseAuthTicket.hasStart;
}
- (NSData*) start {
  return resultResponseAuthTicket.start;
}
- (ResponseAuthTicketBuilder*) setStart:(NSData*) value {
  resultResponseAuthTicket.hasStart = YES;
  resultResponseAuthTicket.start = value;
  return self;
}
- (ResponseAuthTicketBuilder*) clearStart {
  resultResponseAuthTicket.hasStart = NO;
  resultResponseAuthTicket.start = [NSData data];
  return self;
}
- (BOOL) hasExpireTimestampMs {
  return resultResponseAuthTicket.hasExpireTimestampMs;
}
- (UInt64) expireTimestampMs {
  return resultResponseAuthTicket.expireTimestampMs;
}
- (ResponseAuthTicketBuilder*) setExpireTimestampMs:(UInt64) value {
  resultResponseAuthTicket.hasExpireTimestampMs = YES;
  resultResponseAuthTicket.expireTimestampMs = value;
  return self;
}
- (ResponseAuthTicketBuilder*) clearExpireTimestampMs {
  resultResponseAuthTicket.hasExpireTimestampMs = NO;
  resultResponseAuthTicket.expireTimestampMs = 0L;
  return self;
}
- (BOOL) hasEnd {
  return resultResponseAuthTicket.hasEnd;
}
- (NSData*) end {
  return resultResponseAuthTicket.end;
}
- (ResponseAuthTicketBuilder*) setEnd:(NSData*) value {
  resultResponseAuthTicket.hasEnd = YES;
  resultResponseAuthTicket.end = value;
  return self;
}
- (ResponseAuthTicketBuilder*) clearEnd {
  resultResponseAuthTicket.hasEnd = NO;
  resultResponseAuthTicket.end = [NSData data];
  return self;
}
@end

@interface ResponseEnvelopeUnknown6 ()
@property SInt32 unknown1;
@property (strong) ResponseEnvelopeUnknown6Unknown2* unknown2;
@end

@implementation ResponseEnvelopeUnknown6

- (BOOL) hasUnknown1 {
  return !!hasUnknown1_;
}
- (void) setHasUnknown1:(BOOL) _value_ {
  hasUnknown1_ = !!_value_;
}
@synthesize unknown1;
- (BOOL) hasUnknown2 {
  return !!hasUnknown2_;
}
- (void) setHasUnknown2:(BOOL) _value_ {
  hasUnknown2_ = !!_value_;
}
@synthesize unknown2;
- (instancetype) init {
  if ((self = [super init])) {
    self.unknown1 = 0;
    self.unknown2 = [ResponseEnvelopeUnknown6Unknown2 defaultInstance];
  }
  return self;
}
static ResponseEnvelopeUnknown6* defaultResponseEnvelopeUnknown6Instance = nil;
+ (void) initialize {
  if (self == [ResponseEnvelopeUnknown6 class]) {
    defaultResponseEnvelopeUnknown6Instance = [[ResponseEnvelopeUnknown6 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseEnvelopeUnknown6Instance;
}
- (instancetype) defaultInstance {
  return defaultResponseEnvelopeUnknown6Instance;
}
- (BOOL) isInitialized {
  if (!self.hasUnknown1) {
    return NO;
  }
  if (!self.hasUnknown2) {
    return NO;
  }
  if (!self.unknown2.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUnknown1) {
    [output writeInt32:1 value:self.unknown1];
  }
  if (self.hasUnknown2) {
    [output writeMessage:2 value:self.unknown2];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUnknown1) {
    size_ += computeInt32Size(1, self.unknown1);
  }
  if (self.hasUnknown2) {
    size_ += computeMessageSize(2, self.unknown2);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseEnvelopeUnknown6*) parseFromData:(NSData*) data {
  return (ResponseEnvelopeUnknown6*)[[[ResponseEnvelopeUnknown6 builder] mergeFromData:data] build];
}
+ (ResponseEnvelopeUnknown6*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown6*)[[[ResponseEnvelopeUnknown6 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown6*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseEnvelopeUnknown6*)[[[ResponseEnvelopeUnknown6 builder] mergeFromInputStream:input] build];
}
+ (ResponseEnvelopeUnknown6*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown6*)[[[ResponseEnvelopeUnknown6 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown6*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseEnvelopeUnknown6*)[[[ResponseEnvelopeUnknown6 builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseEnvelopeUnknown6*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown6*)[[[ResponseEnvelopeUnknown6 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown6Builder*) builder {
  return [[ResponseEnvelopeUnknown6Builder alloc] init];
}
+ (ResponseEnvelopeUnknown6Builder*) builderWithPrototype:(ResponseEnvelopeUnknown6*) prototype {
  return [[ResponseEnvelopeUnknown6 builder] mergeFrom:prototype];
}
- (ResponseEnvelopeUnknown6Builder*) builder {
  return [ResponseEnvelopeUnknown6 builder];
}
- (ResponseEnvelopeUnknown6Builder*) toBuilder {
  return [ResponseEnvelopeUnknown6 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUnknown1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown1", [NSNumber numberWithInteger:self.unknown1]];
  }
  if (self.hasUnknown2) {
    [output appendFormat:@"%@%@ {\n", indent, @"unknown2"];
    [self.unknown2 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUnknown1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.unknown1] forKey: @"unknown1"];
  }
  if (self.hasUnknown2) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.unknown2 storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"unknown2"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseEnvelopeUnknown6 class]]) {
    return NO;
  }
  ResponseEnvelopeUnknown6 *otherMessage = other;
  return
      self.hasUnknown1 == otherMessage.hasUnknown1 &&
      (!self.hasUnknown1 || self.unknown1 == otherMessage.unknown1) &&
      self.hasUnknown2 == otherMessage.hasUnknown2 &&
      (!self.hasUnknown2 || [self.unknown2 isEqual:otherMessage.unknown2]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUnknown1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unknown1] hash];
  }
  if (self.hasUnknown2) {
    hashCode = hashCode * 31 + [self.unknown2 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseEnvelopeUnknown6Builder()
@property (strong) ResponseEnvelopeUnknown6* resultResponseEnvelopeUnknown6;
@end

@implementation ResponseEnvelopeUnknown6Builder
@synthesize resultResponseEnvelopeUnknown6;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseEnvelopeUnknown6 = [[ResponseEnvelopeUnknown6 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseEnvelopeUnknown6;
}
- (ResponseEnvelopeUnknown6Builder*) clear {
  self.resultResponseEnvelopeUnknown6 = [[ResponseEnvelopeUnknown6 alloc] init];
  return self;
}
- (ResponseEnvelopeUnknown6Builder*) clone {
  return [ResponseEnvelopeUnknown6 builderWithPrototype:resultResponseEnvelopeUnknown6];
}
- (ResponseEnvelopeUnknown6*) defaultInstance {
  return [ResponseEnvelopeUnknown6 defaultInstance];
}
- (ResponseEnvelopeUnknown6*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseEnvelopeUnknown6*) buildPartial {
  ResponseEnvelopeUnknown6* returnMe = resultResponseEnvelopeUnknown6;
  self.resultResponseEnvelopeUnknown6 = nil;
  return returnMe;
}
- (ResponseEnvelopeUnknown6Builder*) mergeFrom:(ResponseEnvelopeUnknown6*) other {
  if (other == [ResponseEnvelopeUnknown6 defaultInstance]) {
    return self;
  }
  if (other.hasUnknown1) {
    [self setUnknown1:other.unknown1];
  }
  if (other.hasUnknown2) {
    [self mergeUnknown2:other.unknown2];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseEnvelopeUnknown6Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseEnvelopeUnknown6Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUnknown1:[input readInt32]];
        break;
      }
      case 18: {
        ResponseEnvelopeUnknown6Unknown2Builder* subBuilder = [ResponseEnvelopeUnknown6Unknown2 builder];
        if (self.hasUnknown2) {
          [subBuilder mergeFrom:self.unknown2];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnknown2:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUnknown1 {
  return resultResponseEnvelopeUnknown6.hasUnknown1;
}
- (SInt32) unknown1 {
  return resultResponseEnvelopeUnknown6.unknown1;
}
- (ResponseEnvelopeUnknown6Builder*) setUnknown1:(SInt32) value {
  resultResponseEnvelopeUnknown6.hasUnknown1 = YES;
  resultResponseEnvelopeUnknown6.unknown1 = value;
  return self;
}
- (ResponseEnvelopeUnknown6Builder*) clearUnknown1 {
  resultResponseEnvelopeUnknown6.hasUnknown1 = NO;
  resultResponseEnvelopeUnknown6.unknown1 = 0;
  return self;
}
- (BOOL) hasUnknown2 {
  return resultResponseEnvelopeUnknown6.hasUnknown2;
}
- (ResponseEnvelopeUnknown6Unknown2*) unknown2 {
  return resultResponseEnvelopeUnknown6.unknown2;
}
- (ResponseEnvelopeUnknown6Builder*) setUnknown2:(ResponseEnvelopeUnknown6Unknown2*) value {
  resultResponseEnvelopeUnknown6.hasUnknown2 = YES;
  resultResponseEnvelopeUnknown6.unknown2 = value;
  return self;
}
- (ResponseEnvelopeUnknown6Builder*) setUnknown2Builder:(ResponseEnvelopeUnknown6Unknown2Builder*) builderForValue {
  return [self setUnknown2:[builderForValue build]];
}
- (ResponseEnvelopeUnknown6Builder*) mergeUnknown2:(ResponseEnvelopeUnknown6Unknown2*) value {
  if (resultResponseEnvelopeUnknown6.hasUnknown2 &&
      resultResponseEnvelopeUnknown6.unknown2 != [ResponseEnvelopeUnknown6Unknown2 defaultInstance]) {
    resultResponseEnvelopeUnknown6.unknown2 =
      [[[ResponseEnvelopeUnknown6Unknown2 builderWithPrototype:resultResponseEnvelopeUnknown6.unknown2] mergeFrom:value] buildPartial];
  } else {
    resultResponseEnvelopeUnknown6.unknown2 = value;
  }
  resultResponseEnvelopeUnknown6.hasUnknown2 = YES;
  return self;
}
- (ResponseEnvelopeUnknown6Builder*) clearUnknown2 {
  resultResponseEnvelopeUnknown6.hasUnknown2 = NO;
  resultResponseEnvelopeUnknown6.unknown2 = [ResponseEnvelopeUnknown6Unknown2 defaultInstance];
  return self;
}
@end

@interface ResponseEnvelopeUnknown6Unknown2 ()
@property (strong) NSData* unknown1;
@end

@implementation ResponseEnvelopeUnknown6Unknown2

- (BOOL) hasUnknown1 {
  return !!hasUnknown1_;
}
- (void) setHasUnknown1:(BOOL) _value_ {
  hasUnknown1_ = !!_value_;
}
@synthesize unknown1;
- (instancetype) init {
  if ((self = [super init])) {
    self.unknown1 = [NSData data];
  }
  return self;
}
static ResponseEnvelopeUnknown6Unknown2* defaultResponseEnvelopeUnknown6Unknown2Instance = nil;
+ (void) initialize {
  if (self == [ResponseEnvelopeUnknown6Unknown2 class]) {
    defaultResponseEnvelopeUnknown6Unknown2Instance = [[ResponseEnvelopeUnknown6Unknown2 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResponseEnvelopeUnknown6Unknown2Instance;
}
- (instancetype) defaultInstance {
  return defaultResponseEnvelopeUnknown6Unknown2Instance;
}
- (BOOL) isInitialized {
  if (!self.hasUnknown1) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUnknown1) {
    [output writeData:1 value:self.unknown1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUnknown1) {
    size_ += computeDataSize(1, self.unknown1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResponseEnvelopeUnknown6Unknown2*) parseFromData:(NSData*) data {
  return (ResponseEnvelopeUnknown6Unknown2*)[[[ResponseEnvelopeUnknown6Unknown2 builder] mergeFromData:data] build];
}
+ (ResponseEnvelopeUnknown6Unknown2*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown6Unknown2*)[[[ResponseEnvelopeUnknown6Unknown2 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown6Unknown2*) parseFromInputStream:(NSInputStream*) input {
  return (ResponseEnvelopeUnknown6Unknown2*)[[[ResponseEnvelopeUnknown6Unknown2 builder] mergeFromInputStream:input] build];
}
+ (ResponseEnvelopeUnknown6Unknown2*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown6Unknown2*)[[[ResponseEnvelopeUnknown6Unknown2 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown6Unknown2*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResponseEnvelopeUnknown6Unknown2*)[[[ResponseEnvelopeUnknown6Unknown2 builder] mergeFromCodedInputStream:input] build];
}
+ (ResponseEnvelopeUnknown6Unknown2*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResponseEnvelopeUnknown6Unknown2*)[[[ResponseEnvelopeUnknown6Unknown2 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResponseEnvelopeUnknown6Unknown2Builder*) builder {
  return [[ResponseEnvelopeUnknown6Unknown2Builder alloc] init];
}
+ (ResponseEnvelopeUnknown6Unknown2Builder*) builderWithPrototype:(ResponseEnvelopeUnknown6Unknown2*) prototype {
  return [[ResponseEnvelopeUnknown6Unknown2 builder] mergeFrom:prototype];
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) builder {
  return [ResponseEnvelopeUnknown6Unknown2 builder];
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) toBuilder {
  return [ResponseEnvelopeUnknown6Unknown2 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUnknown1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown1", self.unknown1];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUnknown1) {
    [dictionary setObject: self.unknown1 forKey: @"unknown1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResponseEnvelopeUnknown6Unknown2 class]]) {
    return NO;
  }
  ResponseEnvelopeUnknown6Unknown2 *otherMessage = other;
  return
      self.hasUnknown1 == otherMessage.hasUnknown1 &&
      (!self.hasUnknown1 || [self.unknown1 isEqual:otherMessage.unknown1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUnknown1) {
    hashCode = hashCode * 31 + [self.unknown1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResponseEnvelopeUnknown6Unknown2Builder()
@property (strong) ResponseEnvelopeUnknown6Unknown2* resultResponseEnvelopeUnknown6Unknown2;
@end

@implementation ResponseEnvelopeUnknown6Unknown2Builder
@synthesize resultResponseEnvelopeUnknown6Unknown2;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResponseEnvelopeUnknown6Unknown2 = [[ResponseEnvelopeUnknown6Unknown2 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResponseEnvelopeUnknown6Unknown2;
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) clear {
  self.resultResponseEnvelopeUnknown6Unknown2 = [[ResponseEnvelopeUnknown6Unknown2 alloc] init];
  return self;
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) clone {
  return [ResponseEnvelopeUnknown6Unknown2 builderWithPrototype:resultResponseEnvelopeUnknown6Unknown2];
}
- (ResponseEnvelopeUnknown6Unknown2*) defaultInstance {
  return [ResponseEnvelopeUnknown6Unknown2 defaultInstance];
}
- (ResponseEnvelopeUnknown6Unknown2*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResponseEnvelopeUnknown6Unknown2*) buildPartial {
  ResponseEnvelopeUnknown6Unknown2* returnMe = resultResponseEnvelopeUnknown6Unknown2;
  self.resultResponseEnvelopeUnknown6Unknown2 = nil;
  return returnMe;
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) mergeFrom:(ResponseEnvelopeUnknown6Unknown2*) other {
  if (other == [ResponseEnvelopeUnknown6Unknown2 defaultInstance]) {
    return self;
  }
  if (other.hasUnknown1) {
    [self setUnknown1:other.unknown1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUnknown1:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUnknown1 {
  return resultResponseEnvelopeUnknown6Unknown2.hasUnknown1;
}
- (NSData*) unknown1 {
  return resultResponseEnvelopeUnknown6Unknown2.unknown1;
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) setUnknown1:(NSData*) value {
  resultResponseEnvelopeUnknown6Unknown2.hasUnknown1 = YES;
  resultResponseEnvelopeUnknown6Unknown2.unknown1 = value;
  return self;
}
- (ResponseEnvelopeUnknown6Unknown2Builder*) clearUnknown1 {
  resultResponseEnvelopeUnknown6Unknown2.hasUnknown1 = NO;
  resultResponseEnvelopeUnknown6Unknown2.unknown1 = [NSData data];
  return self;
}
@end

@interface GetMapObjectsResponse ()
@property (strong) NSMutableArray * mapCellsArray;
@property (strong) SpawnPoint* status;
@end

@implementation GetMapObjectsResponse

@synthesize mapCellsArray;
@dynamic mapCells;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = [SpawnPoint defaultInstance];
  }
  return self;
}
static GetMapObjectsResponse* defaultGetMapObjectsResponseInstance = nil;
+ (void) initialize {
  if (self == [GetMapObjectsResponse class]) {
    defaultGetMapObjectsResponseInstance = [[GetMapObjectsResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGetMapObjectsResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultGetMapObjectsResponseInstance;
}
- (NSArray *)mapCells {
  return mapCellsArray;
}
- (MapCell*)mapCellsAtIndex:(NSUInteger)index {
  return [mapCellsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitmapCells = YES;
   [self.mapCells enumerateObjectsUsingBlock:^(MapCell *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmapCells = NO;
      *stop = YES;
    }
  }];
  if (!isInitmapCells) return isInitmapCells;
  if (self.hasStatus) {
    if (!self.status.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.mapCellsArray enumerateObjectsUsingBlock:^(MapCell *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasStatus) {
    [output writeMessage:2 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.mapCellsArray enumerateObjectsUsingBlock:^(MapCell *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasStatus) {
    size_ += computeMessageSize(2, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetMapObjectsResponse*) parseFromData:(NSData*) data {
  return (GetMapObjectsResponse*)[[[GetMapObjectsResponse builder] mergeFromData:data] build];
}
+ (GetMapObjectsResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetMapObjectsResponse*)[[[GetMapObjectsResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GetMapObjectsResponse*) parseFromInputStream:(NSInputStream*) input {
  return (GetMapObjectsResponse*)[[[GetMapObjectsResponse builder] mergeFromInputStream:input] build];
}
+ (GetMapObjectsResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetMapObjectsResponse*)[[[GetMapObjectsResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetMapObjectsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GetMapObjectsResponse*)[[[GetMapObjectsResponse builder] mergeFromCodedInputStream:input] build];
}
+ (GetMapObjectsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GetMapObjectsResponse*)[[[GetMapObjectsResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GetMapObjectsResponseBuilder*) builder {
  return [[GetMapObjectsResponseBuilder alloc] init];
}
+ (GetMapObjectsResponseBuilder*) builderWithPrototype:(GetMapObjectsResponse*) prototype {
  return [[GetMapObjectsResponse builder] mergeFrom:prototype];
}
- (GetMapObjectsResponseBuilder*) builder {
  return [GetMapObjectsResponse builder];
}
- (GetMapObjectsResponseBuilder*) toBuilder {
  return [GetMapObjectsResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.mapCellsArray enumerateObjectsUsingBlock:^(MapCell *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"mapCells"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"status"];
    [self.status writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (MapCell* element in self.mapCellsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"mapCells"];
  }
  if (self.hasStatus) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.status storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GetMapObjectsResponse class]]) {
    return NO;
  }
  GetMapObjectsResponse *otherMessage = other;
  return
      [self.mapCellsArray isEqualToArray:otherMessage.mapCellsArray] &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.mapCellsArray enumerateObjectsUsingBlock:^(MapCell *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GetMapObjectsResponseBuilder()
@property (strong) GetMapObjectsResponse* resultGetMapObjectsResponse;
@end

@implementation GetMapObjectsResponseBuilder
@synthesize resultGetMapObjectsResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGetMapObjectsResponse = [[GetMapObjectsResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGetMapObjectsResponse;
}
- (GetMapObjectsResponseBuilder*) clear {
  self.resultGetMapObjectsResponse = [[GetMapObjectsResponse alloc] init];
  return self;
}
- (GetMapObjectsResponseBuilder*) clone {
  return [GetMapObjectsResponse builderWithPrototype:resultGetMapObjectsResponse];
}
- (GetMapObjectsResponse*) defaultInstance {
  return [GetMapObjectsResponse defaultInstance];
}
- (GetMapObjectsResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GetMapObjectsResponse*) buildPartial {
  GetMapObjectsResponse* returnMe = resultGetMapObjectsResponse;
  self.resultGetMapObjectsResponse = nil;
  return returnMe;
}
- (GetMapObjectsResponseBuilder*) mergeFrom:(GetMapObjectsResponse*) other {
  if (other == [GetMapObjectsResponse defaultInstance]) {
    return self;
  }
  if (other.mapCellsArray.count > 0) {
    if (resultGetMapObjectsResponse.mapCellsArray == nil) {
      resultGetMapObjectsResponse.mapCellsArray = [[NSMutableArray alloc] initWithArray:other.mapCellsArray];
    } else {
      [resultGetMapObjectsResponse.mapCellsArray addObjectsFromArray:other.mapCellsArray];
    }
  }
  if (other.hasStatus) {
    [self mergeStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GetMapObjectsResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GetMapObjectsResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MapCellBuilder* subBuilder = [MapCell builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMapCells:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        SpawnPointBuilder* subBuilder = [SpawnPoint builder];
        if (self.hasStatus) {
          [subBuilder mergeFrom:self.status];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStatus:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)mapCells {
  return resultGetMapObjectsResponse.mapCellsArray;
}
- (MapCell*)mapCellsAtIndex:(NSUInteger)index {
  return [resultGetMapObjectsResponse mapCellsAtIndex:index];
}
- (GetMapObjectsResponseBuilder *)addMapCells:(MapCell*)value {
  if (resultGetMapObjectsResponse.mapCellsArray == nil) {
    resultGetMapObjectsResponse.mapCellsArray = [[NSMutableArray alloc]init];
  }
  [resultGetMapObjectsResponse.mapCellsArray addObject:value];
  return self;
}
- (GetMapObjectsResponseBuilder *)setMapCellsArray:(NSArray *)array {
  resultGetMapObjectsResponse.mapCellsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (GetMapObjectsResponseBuilder *)clearMapCells {
  resultGetMapObjectsResponse.mapCellsArray = nil;
  return self;
}
- (BOOL) hasStatus {
  return resultGetMapObjectsResponse.hasStatus;
}
- (SpawnPoint*) status {
  return resultGetMapObjectsResponse.status;
}
- (GetMapObjectsResponseBuilder*) setStatus:(SpawnPoint*) value {
  resultGetMapObjectsResponse.hasStatus = YES;
  resultGetMapObjectsResponse.status = value;
  return self;
}
- (GetMapObjectsResponseBuilder*) setStatusBuilder:(SpawnPointBuilder*) builderForValue {
  return [self setStatus:[builderForValue build]];
}
- (GetMapObjectsResponseBuilder*) mergeStatus:(SpawnPoint*) value {
  if (resultGetMapObjectsResponse.hasStatus &&
      resultGetMapObjectsResponse.status != [SpawnPoint defaultInstance]) {
    resultGetMapObjectsResponse.status =
      [[[SpawnPoint builderWithPrototype:resultGetMapObjectsResponse.status] mergeFrom:value] buildPartial];
  } else {
    resultGetMapObjectsResponse.status = value;
  }
  resultGetMapObjectsResponse.hasStatus = YES;
  return self;
}
- (GetMapObjectsResponseBuilder*) clearStatus {
  resultGetMapObjectsResponse.hasStatus = NO;
  resultGetMapObjectsResponse.status = [SpawnPoint defaultInstance];
  return self;
}
@end

@interface MapCell ()
@property UInt64 s2CellId;
@property SInt64 currentTimestampMs;
@property (strong) NSMutableArray * fortsArray;
@property (strong) NSMutableArray * spawnPointsArray;
@property (strong) NSMutableArray * deletedObjectsArray;
@property BOOL isTruncatedList;
@property (strong) NSMutableArray * fortSummariesArray;
@property (strong) NSMutableArray * decimatedSpawnPointsArray;
@property (strong) NSMutableArray * wildPokemonsArray;
@property (strong) NSMutableArray * catchablePokemonsArray;
@property (strong) NSMutableArray * nearbyPokemonsArray;
@end

@implementation MapCell

- (BOOL) hasS2CellId {
  return !!hasS2CellId_;
}
- (void) setHasS2CellId:(BOOL) _value_ {
  hasS2CellId_ = !!_value_;
}
@synthesize s2CellId;
- (BOOL) hasCurrentTimestampMs {
  return !!hasCurrentTimestampMs_;
}
- (void) setHasCurrentTimestampMs:(BOOL) _value_ {
  hasCurrentTimestampMs_ = !!_value_;
}
@synthesize currentTimestampMs;
@synthesize fortsArray;
@dynamic forts;
@synthesize spawnPointsArray;
@dynamic spawnPoints;
@synthesize deletedObjectsArray;
@dynamic deletedObjects;
- (BOOL) hasIsTruncatedList {
  return !!hasIsTruncatedList_;
}
- (void) setHasIsTruncatedList:(BOOL) _value_ {
  hasIsTruncatedList_ = !!_value_;
}
- (BOOL) isTruncatedList {
  return !!isTruncatedList_;
}
- (void) setIsTruncatedList:(BOOL) _value_ {
  isTruncatedList_ = !!_value_;
}
@synthesize fortSummariesArray;
@dynamic fortSummaries;
@synthesize decimatedSpawnPointsArray;
@dynamic decimatedSpawnPoints;
@synthesize wildPokemonsArray;
@dynamic wildPokemons;
@synthesize catchablePokemonsArray;
@dynamic catchablePokemons;
@synthesize nearbyPokemonsArray;
@dynamic nearbyPokemons;
- (instancetype) init {
  if ((self = [super init])) {
    self.s2CellId = 0L;
    self.currentTimestampMs = 0L;
    self.isTruncatedList = NO;
  }
  return self;
}
static MapCell* defaultMapCellInstance = nil;
+ (void) initialize {
  if (self == [MapCell class]) {
    defaultMapCellInstance = [[MapCell alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMapCellInstance;
}
- (instancetype) defaultInstance {
  return defaultMapCellInstance;
}
- (NSArray *)forts {
  return fortsArray;
}
- (NSData*)fortsAtIndex:(NSUInteger)index {
  return [fortsArray objectAtIndex:index];
}
- (NSArray *)spawnPoints {
  return spawnPointsArray;
}
- (SpawnPoint*)spawnPointsAtIndex:(NSUInteger)index {
  return [spawnPointsArray objectAtIndex:index];
}
- (NSArray *)deletedObjects {
  return deletedObjectsArray;
}
- (NSString*)deletedObjectsAtIndex:(NSUInteger)index {
  return [deletedObjectsArray objectAtIndex:index];
}
- (NSArray *)fortSummaries {
  return fortSummariesArray;
}
- (NSData*)fortSummariesAtIndex:(NSUInteger)index {
  return [fortSummariesArray objectAtIndex:index];
}
- (NSArray *)decimatedSpawnPoints {
  return decimatedSpawnPointsArray;
}
- (SpawnPoint*)decimatedSpawnPointsAtIndex:(NSUInteger)index {
  return [decimatedSpawnPointsArray objectAtIndex:index];
}
- (NSArray *)wildPokemons {
  return wildPokemonsArray;
}
- (WildPokemon*)wildPokemonsAtIndex:(NSUInteger)index {
  return [wildPokemonsArray objectAtIndex:index];
}
- (NSArray *)catchablePokemons {
  return catchablePokemonsArray;
}
- (MapPokemon*)catchablePokemonsAtIndex:(NSUInteger)index {
  return [catchablePokemonsArray objectAtIndex:index];
}
- (NSArray *)nearbyPokemons {
  return nearbyPokemonsArray;
}
- (NearbyPokemon*)nearbyPokemonsAtIndex:(NSUInteger)index {
  return [nearbyPokemonsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitspawnPoints = YES;
   [self.spawnPoints enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitspawnPoints = NO;
      *stop = YES;
    }
  }];
  if (!isInitspawnPoints) return isInitspawnPoints;
  __block BOOL isInitdecimatedSpawnPoints = YES;
   [self.decimatedSpawnPoints enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdecimatedSpawnPoints = NO;
      *stop = YES;
    }
  }];
  if (!isInitdecimatedSpawnPoints) return isInitdecimatedSpawnPoints;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasS2CellId) {
    [output writeUInt64:1 value:self.s2CellId];
  }
  if (self.hasCurrentTimestampMs) {
    [output writeInt64:2 value:self.currentTimestampMs];
  }
  [self.fortsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:3 value:element];
  }];
  [self.spawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.wildPokemonsArray enumerateObjectsUsingBlock:^(WildPokemon *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.deletedObjectsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:6 value:element];
  }];
  if (self.hasIsTruncatedList) {
    [output writeBool:7 value:self.isTruncatedList];
  }
  [self.fortSummariesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:8 value:element];
  }];
  [self.decimatedSpawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.catchablePokemonsArray enumerateObjectsUsingBlock:^(MapPokemon *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.nearbyPokemonsArray enumerateObjectsUsingBlock:^(NearbyPokemon *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasS2CellId) {
    size_ += computeUInt64Size(1, self.s2CellId);
  }
  if (self.hasCurrentTimestampMs) {
    size_ += computeInt64Size(2, self.currentTimestampMs);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.fortsArray.count;
    [self.fortsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.spawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.wildPokemonsArray enumerateObjectsUsingBlock:^(WildPokemon *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.deletedObjectsArray.count;
    [self.deletedObjectsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasIsTruncatedList) {
    size_ += computeBoolSize(7, self.isTruncatedList);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.fortSummariesArray.count;
    [self.fortSummariesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.decimatedSpawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.catchablePokemonsArray enumerateObjectsUsingBlock:^(MapPokemon *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  [self.nearbyPokemonsArray enumerateObjectsUsingBlock:^(NearbyPokemon *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MapCell*) parseFromData:(NSData*) data {
  return (MapCell*)[[[MapCell builder] mergeFromData:data] build];
}
+ (MapCell*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapCell*)[[[MapCell builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MapCell*) parseFromInputStream:(NSInputStream*) input {
  return (MapCell*)[[[MapCell builder] mergeFromInputStream:input] build];
}
+ (MapCell*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapCell*)[[[MapCell builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MapCell*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MapCell*)[[[MapCell builder] mergeFromCodedInputStream:input] build];
}
+ (MapCell*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapCell*)[[[MapCell builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MapCellBuilder*) builder {
  return [[MapCellBuilder alloc] init];
}
+ (MapCellBuilder*) builderWithPrototype:(MapCell*) prototype {
  return [[MapCell builder] mergeFrom:prototype];
}
- (MapCellBuilder*) builder {
  return [MapCell builder];
}
- (MapCellBuilder*) toBuilder {
  return [MapCell builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasS2CellId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s2CellId", [NSNumber numberWithLongLong:self.s2CellId]];
  }
  if (self.hasCurrentTimestampMs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentTimestampMs", [NSNumber numberWithLongLong:self.currentTimestampMs]];
  }
  [self.fortsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"forts", obj];
  }];
  [self.spawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"spawnPoints"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.wildPokemonsArray enumerateObjectsUsingBlock:^(WildPokemon *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"wildPokemons"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.deletedObjectsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deletedObjects", obj];
  }];
  if (self.hasIsTruncatedList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isTruncatedList", [NSNumber numberWithBool:self.isTruncatedList]];
  }
  [self.fortSummariesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fortSummaries", obj];
  }];
  [self.decimatedSpawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"decimatedSpawnPoints"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.catchablePokemonsArray enumerateObjectsUsingBlock:^(MapPokemon *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"catchablePokemons"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.nearbyPokemonsArray enumerateObjectsUsingBlock:^(NearbyPokemon *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"nearbyPokemons"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasS2CellId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.s2CellId] forKey: @"s2CellId"];
  }
  if (self.hasCurrentTimestampMs) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.currentTimestampMs] forKey: @"currentTimestampMs"];
  }
  [dictionary setObject:self.forts forKey: @"forts"];
  for (SpawnPoint* element in self.spawnPointsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"spawnPoints"];
  }
  for (WildPokemon* element in self.wildPokemonsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"wildPokemons"];
  }
  [dictionary setObject:self.deletedObjects forKey: @"deletedObjects"];
  if (self.hasIsTruncatedList) {
    [dictionary setObject: [NSNumber numberWithBool:self.isTruncatedList] forKey: @"isTruncatedList"];
  }
  [dictionary setObject:self.fortSummaries forKey: @"fortSummaries"];
  for (SpawnPoint* element in self.decimatedSpawnPointsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"decimatedSpawnPoints"];
  }
  for (MapPokemon* element in self.catchablePokemonsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"catchablePokemons"];
  }
  for (NearbyPokemon* element in self.nearbyPokemonsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"nearbyPokemons"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MapCell class]]) {
    return NO;
  }
  MapCell *otherMessage = other;
  return
      self.hasS2CellId == otherMessage.hasS2CellId &&
      (!self.hasS2CellId || self.s2CellId == otherMessage.s2CellId) &&
      self.hasCurrentTimestampMs == otherMessage.hasCurrentTimestampMs &&
      (!self.hasCurrentTimestampMs || self.currentTimestampMs == otherMessage.currentTimestampMs) &&
      [self.fortsArray isEqualToArray:otherMessage.fortsArray] &&
      [self.spawnPointsArray isEqualToArray:otherMessage.spawnPointsArray] &&
      [self.wildPokemonsArray isEqualToArray:otherMessage.wildPokemonsArray] &&
      [self.deletedObjectsArray isEqualToArray:otherMessage.deletedObjectsArray] &&
      self.hasIsTruncatedList == otherMessage.hasIsTruncatedList &&
      (!self.hasIsTruncatedList || self.isTruncatedList == otherMessage.isTruncatedList) &&
      [self.fortSummariesArray isEqualToArray:otherMessage.fortSummariesArray] &&
      [self.decimatedSpawnPointsArray isEqualToArray:otherMessage.decimatedSpawnPointsArray] &&
      [self.catchablePokemonsArray isEqualToArray:otherMessage.catchablePokemonsArray] &&
      [self.nearbyPokemonsArray isEqualToArray:otherMessage.nearbyPokemonsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasS2CellId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.s2CellId] hash];
  }
  if (self.hasCurrentTimestampMs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.currentTimestampMs] hash];
  }
  [self.fortsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.spawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.wildPokemonsArray enumerateObjectsUsingBlock:^(WildPokemon *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.deletedObjectsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasIsTruncatedList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isTruncatedList] hash];
  }
  [self.fortSummariesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.decimatedSpawnPointsArray enumerateObjectsUsingBlock:^(SpawnPoint *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.catchablePokemonsArray enumerateObjectsUsingBlock:^(MapPokemon *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.nearbyPokemonsArray enumerateObjectsUsingBlock:^(NearbyPokemon *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MapCellBuilder()
@property (strong) MapCell* resultMapCell;
@end

@implementation MapCellBuilder
@synthesize resultMapCell;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMapCell = [[MapCell alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMapCell;
}
- (MapCellBuilder*) clear {
  self.resultMapCell = [[MapCell alloc] init];
  return self;
}
- (MapCellBuilder*) clone {
  return [MapCell builderWithPrototype:resultMapCell];
}
- (MapCell*) defaultInstance {
  return [MapCell defaultInstance];
}
- (MapCell*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MapCell*) buildPartial {
  MapCell* returnMe = resultMapCell;
  self.resultMapCell = nil;
  return returnMe;
}
- (MapCellBuilder*) mergeFrom:(MapCell*) other {
  if (other == [MapCell defaultInstance]) {
    return self;
  }
  if (other.hasS2CellId) {
    [self setS2CellId:other.s2CellId];
  }
  if (other.hasCurrentTimestampMs) {
    [self setCurrentTimestampMs:other.currentTimestampMs];
  }
  if (other.fortsArray.count > 0) {
    if (resultMapCell.fortsArray == nil) {
      resultMapCell.fortsArray = [[NSMutableArray alloc] initWithArray:other.fortsArray];
    } else {
      [resultMapCell.fortsArray addObjectsFromArray:other.fortsArray];
    }
  }
  if (other.spawnPointsArray.count > 0) {
    if (resultMapCell.spawnPointsArray == nil) {
      resultMapCell.spawnPointsArray = [[NSMutableArray alloc] initWithArray:other.spawnPointsArray];
    } else {
      [resultMapCell.spawnPointsArray addObjectsFromArray:other.spawnPointsArray];
    }
  }
  if (other.deletedObjectsArray.count > 0) {
    if (resultMapCell.deletedObjectsArray == nil) {
      resultMapCell.deletedObjectsArray = [[NSMutableArray alloc] initWithArray:other.deletedObjectsArray];
    } else {
      [resultMapCell.deletedObjectsArray addObjectsFromArray:other.deletedObjectsArray];
    }
  }
  if (other.hasIsTruncatedList) {
    [self setIsTruncatedList:other.isTruncatedList];
  }
  if (other.fortSummariesArray.count > 0) {
    if (resultMapCell.fortSummariesArray == nil) {
      resultMapCell.fortSummariesArray = [[NSMutableArray alloc] initWithArray:other.fortSummariesArray];
    } else {
      [resultMapCell.fortSummariesArray addObjectsFromArray:other.fortSummariesArray];
    }
  }
  if (other.decimatedSpawnPointsArray.count > 0) {
    if (resultMapCell.decimatedSpawnPointsArray == nil) {
      resultMapCell.decimatedSpawnPointsArray = [[NSMutableArray alloc] initWithArray:other.decimatedSpawnPointsArray];
    } else {
      [resultMapCell.decimatedSpawnPointsArray addObjectsFromArray:other.decimatedSpawnPointsArray];
    }
  }
  if (other.wildPokemonsArray.count > 0) {
    if (resultMapCell.wildPokemonsArray == nil) {
      resultMapCell.wildPokemonsArray = [[NSMutableArray alloc] initWithArray:other.wildPokemonsArray];
    } else {
      [resultMapCell.wildPokemonsArray addObjectsFromArray:other.wildPokemonsArray];
    }
  }
  if (other.catchablePokemonsArray.count > 0) {
    if (resultMapCell.catchablePokemonsArray == nil) {
      resultMapCell.catchablePokemonsArray = [[NSMutableArray alloc] initWithArray:other.catchablePokemonsArray];
    } else {
      [resultMapCell.catchablePokemonsArray addObjectsFromArray:other.catchablePokemonsArray];
    }
  }
  if (other.nearbyPokemonsArray.count > 0) {
    if (resultMapCell.nearbyPokemonsArray == nil) {
      resultMapCell.nearbyPokemonsArray = [[NSMutableArray alloc] initWithArray:other.nearbyPokemonsArray];
    } else {
      [resultMapCell.nearbyPokemonsArray addObjectsFromArray:other.nearbyPokemonsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MapCellBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MapCellBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setS2CellId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setCurrentTimestampMs:[input readInt64]];
        break;
      }
      case 26: {
        [self addForts:[input readData]];
        break;
      }
      case 34: {
        SpawnPointBuilder* subBuilder = [SpawnPoint builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSpawnPoints:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        WildPokemonBuilder* subBuilder = [WildPokemon builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWildPokemons:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self addDeletedObjects:[input readString]];
        break;
      }
      case 56: {
        [self setIsTruncatedList:[input readBool]];
        break;
      }
      case 66: {
        [self addFortSummaries:[input readData]];
        break;
      }
      case 74: {
        SpawnPointBuilder* subBuilder = [SpawnPoint builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDecimatedSpawnPoints:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        MapPokemonBuilder* subBuilder = [MapPokemon builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCatchablePokemons:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        NearbyPokemonBuilder* subBuilder = [NearbyPokemon builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNearbyPokemons:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasS2CellId {
  return resultMapCell.hasS2CellId;
}
- (UInt64) s2CellId {
  return resultMapCell.s2CellId;
}
- (MapCellBuilder*) setS2CellId:(UInt64) value {
  resultMapCell.hasS2CellId = YES;
  resultMapCell.s2CellId = value;
  return self;
}
- (MapCellBuilder*) clearS2CellId {
  resultMapCell.hasS2CellId = NO;
  resultMapCell.s2CellId = 0L;
  return self;
}
- (BOOL) hasCurrentTimestampMs {
  return resultMapCell.hasCurrentTimestampMs;
}
- (SInt64) currentTimestampMs {
  return resultMapCell.currentTimestampMs;
}
- (MapCellBuilder*) setCurrentTimestampMs:(SInt64) value {
  resultMapCell.hasCurrentTimestampMs = YES;
  resultMapCell.currentTimestampMs = value;
  return self;
}
- (MapCellBuilder*) clearCurrentTimestampMs {
  resultMapCell.hasCurrentTimestampMs = NO;
  resultMapCell.currentTimestampMs = 0L;
  return self;
}
- (NSMutableArray *)forts {
  return resultMapCell.fortsArray;
}
- (NSData*)fortsAtIndex:(NSUInteger)index {
  return [resultMapCell fortsAtIndex:index];
}
- (MapCellBuilder *)addForts:(NSData*)value {
  if (resultMapCell.fortsArray == nil) {
    resultMapCell.fortsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.fortsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setFortsArray:(NSArray *)array {
  resultMapCell.fortsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearForts {
  resultMapCell.fortsArray = nil;
  return self;
}
- (NSMutableArray *)spawnPoints {
  return resultMapCell.spawnPointsArray;
}
- (SpawnPoint*)spawnPointsAtIndex:(NSUInteger)index {
  return [resultMapCell spawnPointsAtIndex:index];
}
- (MapCellBuilder *)addSpawnPoints:(SpawnPoint*)value {
  if (resultMapCell.spawnPointsArray == nil) {
    resultMapCell.spawnPointsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.spawnPointsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setSpawnPointsArray:(NSArray *)array {
  resultMapCell.spawnPointsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearSpawnPoints {
  resultMapCell.spawnPointsArray = nil;
  return self;
}
- (NSMutableArray *)deletedObjects {
  return resultMapCell.deletedObjectsArray;
}
- (NSString*)deletedObjectsAtIndex:(NSUInteger)index {
  return [resultMapCell deletedObjectsAtIndex:index];
}
- (MapCellBuilder *)addDeletedObjects:(NSString*)value {
  if (resultMapCell.deletedObjectsArray == nil) {
    resultMapCell.deletedObjectsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.deletedObjectsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setDeletedObjectsArray:(NSArray *)array {
  resultMapCell.deletedObjectsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearDeletedObjects {
  resultMapCell.deletedObjectsArray = nil;
  return self;
}
- (BOOL) hasIsTruncatedList {
  return resultMapCell.hasIsTruncatedList;
}
- (BOOL) isTruncatedList {
  return resultMapCell.isTruncatedList;
}
- (MapCellBuilder*) setIsTruncatedList:(BOOL) value {
  resultMapCell.hasIsTruncatedList = YES;
  resultMapCell.isTruncatedList = value;
  return self;
}
- (MapCellBuilder*) clearIsTruncatedList {
  resultMapCell.hasIsTruncatedList = NO;
  resultMapCell.isTruncatedList = NO;
  return self;
}
- (NSMutableArray *)fortSummaries {
  return resultMapCell.fortSummariesArray;
}
- (NSData*)fortSummariesAtIndex:(NSUInteger)index {
  return [resultMapCell fortSummariesAtIndex:index];
}
- (MapCellBuilder *)addFortSummaries:(NSData*)value {
  if (resultMapCell.fortSummariesArray == nil) {
    resultMapCell.fortSummariesArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.fortSummariesArray addObject:value];
  return self;
}
- (MapCellBuilder *)setFortSummariesArray:(NSArray *)array {
  resultMapCell.fortSummariesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearFortSummaries {
  resultMapCell.fortSummariesArray = nil;
  return self;
}
- (NSMutableArray *)decimatedSpawnPoints {
  return resultMapCell.decimatedSpawnPointsArray;
}
- (SpawnPoint*)decimatedSpawnPointsAtIndex:(NSUInteger)index {
  return [resultMapCell decimatedSpawnPointsAtIndex:index];
}
- (MapCellBuilder *)addDecimatedSpawnPoints:(SpawnPoint*)value {
  if (resultMapCell.decimatedSpawnPointsArray == nil) {
    resultMapCell.decimatedSpawnPointsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.decimatedSpawnPointsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setDecimatedSpawnPointsArray:(NSArray *)array {
  resultMapCell.decimatedSpawnPointsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearDecimatedSpawnPoints {
  resultMapCell.decimatedSpawnPointsArray = nil;
  return self;
}
- (NSMutableArray *)wildPokemons {
  return resultMapCell.wildPokemonsArray;
}
- (WildPokemon*)wildPokemonsAtIndex:(NSUInteger)index {
  return [resultMapCell wildPokemonsAtIndex:index];
}
- (MapCellBuilder *)addWildPokemons:(WildPokemon*)value {
  if (resultMapCell.wildPokemonsArray == nil) {
    resultMapCell.wildPokemonsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.wildPokemonsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setWildPokemonsArray:(NSArray *)array {
  resultMapCell.wildPokemonsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearWildPokemons {
  resultMapCell.wildPokemonsArray = nil;
  return self;
}
- (NSMutableArray *)catchablePokemons {
  return resultMapCell.catchablePokemonsArray;
}
- (MapPokemon*)catchablePokemonsAtIndex:(NSUInteger)index {
  return [resultMapCell catchablePokemonsAtIndex:index];
}
- (MapCellBuilder *)addCatchablePokemons:(MapPokemon*)value {
  if (resultMapCell.catchablePokemonsArray == nil) {
    resultMapCell.catchablePokemonsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.catchablePokemonsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setCatchablePokemonsArray:(NSArray *)array {
  resultMapCell.catchablePokemonsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearCatchablePokemons {
  resultMapCell.catchablePokemonsArray = nil;
  return self;
}
- (NSMutableArray *)nearbyPokemons {
  return resultMapCell.nearbyPokemonsArray;
}
- (NearbyPokemon*)nearbyPokemonsAtIndex:(NSUInteger)index {
  return [resultMapCell nearbyPokemonsAtIndex:index];
}
- (MapCellBuilder *)addNearbyPokemons:(NearbyPokemon*)value {
  if (resultMapCell.nearbyPokemonsArray == nil) {
    resultMapCell.nearbyPokemonsArray = [[NSMutableArray alloc]init];
  }
  [resultMapCell.nearbyPokemonsArray addObject:value];
  return self;
}
- (MapCellBuilder *)setNearbyPokemonsArray:(NSArray *)array {
  resultMapCell.nearbyPokemonsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MapCellBuilder *)clearNearbyPokemons {
  resultMapCell.nearbyPokemonsArray = nil;
  return self;
}
@end

@interface SpawnPoint ()
@property Float64 latitude;
@property Float64 longitude;
@end

@implementation SpawnPoint

- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (instancetype) init {
  if ((self = [super init])) {
    self.latitude = 0;
    self.longitude = 0;
  }
  return self;
}
static SpawnPoint* defaultSpawnPointInstance = nil;
+ (void) initialize {
  if (self == [SpawnPoint class]) {
    defaultSpawnPointInstance = [[SpawnPoint alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSpawnPointInstance;
}
- (instancetype) defaultInstance {
  return defaultSpawnPointInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLatitude) {
    return NO;
  }
  if (!self.hasLongitude) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLatitude) {
    [output writeDouble:2 value:self.latitude];
  }
  if (self.hasLongitude) {
    [output writeDouble:3 value:self.longitude];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLatitude) {
    size_ += computeDoubleSize(2, self.latitude);
  }
  if (self.hasLongitude) {
    size_ += computeDoubleSize(3, self.longitude);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SpawnPoint*) parseFromData:(NSData*) data {
  return (SpawnPoint*)[[[SpawnPoint builder] mergeFromData:data] build];
}
+ (SpawnPoint*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SpawnPoint*)[[[SpawnPoint builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SpawnPoint*) parseFromInputStream:(NSInputStream*) input {
  return (SpawnPoint*)[[[SpawnPoint builder] mergeFromInputStream:input] build];
}
+ (SpawnPoint*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SpawnPoint*)[[[SpawnPoint builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SpawnPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SpawnPoint*)[[[SpawnPoint builder] mergeFromCodedInputStream:input] build];
}
+ (SpawnPoint*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SpawnPoint*)[[[SpawnPoint builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SpawnPointBuilder*) builder {
  return [[SpawnPointBuilder alloc] init];
}
+ (SpawnPointBuilder*) builderWithPrototype:(SpawnPoint*) prototype {
  return [[SpawnPoint builder] mergeFrom:prototype];
}
- (SpawnPointBuilder*) builder {
  return [SpawnPoint builder];
}
- (SpawnPointBuilder*) toBuilder {
  return [SpawnPoint builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.latitude] forKey: @"latitude"];
  }
  if (self.hasLongitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.longitude] forKey: @"longitude"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SpawnPoint class]]) {
    return NO;
  }
  SpawnPoint *otherMessage = other;
  return
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SpawnPointBuilder()
@property (strong) SpawnPoint* resultSpawnPoint;
@end

@implementation SpawnPointBuilder
@synthesize resultSpawnPoint;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSpawnPoint = [[SpawnPoint alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSpawnPoint;
}
- (SpawnPointBuilder*) clear {
  self.resultSpawnPoint = [[SpawnPoint alloc] init];
  return self;
}
- (SpawnPointBuilder*) clone {
  return [SpawnPoint builderWithPrototype:resultSpawnPoint];
}
- (SpawnPoint*) defaultInstance {
  return [SpawnPoint defaultInstance];
}
- (SpawnPoint*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SpawnPoint*) buildPartial {
  SpawnPoint* returnMe = resultSpawnPoint;
  self.resultSpawnPoint = nil;
  return returnMe;
}
- (SpawnPointBuilder*) mergeFrom:(SpawnPoint*) other {
  if (other == [SpawnPoint defaultInstance]) {
    return self;
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SpawnPointBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SpawnPointBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 17: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 25: {
        [self setLongitude:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasLatitude {
  return resultSpawnPoint.hasLatitude;
}
- (Float64) latitude {
  return resultSpawnPoint.latitude;
}
- (SpawnPointBuilder*) setLatitude:(Float64) value {
  resultSpawnPoint.hasLatitude = YES;
  resultSpawnPoint.latitude = value;
  return self;
}
- (SpawnPointBuilder*) clearLatitude {
  resultSpawnPoint.hasLatitude = NO;
  resultSpawnPoint.latitude = 0;
  return self;
}
- (BOOL) hasLongitude {
  return resultSpawnPoint.hasLongitude;
}
- (Float64) longitude {
  return resultSpawnPoint.longitude;
}
- (SpawnPointBuilder*) setLongitude:(Float64) value {
  resultSpawnPoint.hasLongitude = YES;
  resultSpawnPoint.longitude = value;
  return self;
}
- (SpawnPointBuilder*) clearLongitude {
  resultSpawnPoint.hasLongitude = NO;
  resultSpawnPoint.longitude = 0;
  return self;
}
@end

@interface MapPokemon ()
@property (strong) NSString* spawnpointId;
/*
@property (readonly) UInt64 encounterId;
@property (readonly) PokemonId pokemonId;
@property (readonly) SInt64 expirationTimestampMs;
@property (readonly) Float64 latitude;
@property (readonly) Float64 longitude;
 */
@end

@implementation MapPokemon

- (BOOL) hasSpawnpointId {
  return !!hasSpawnpointId_;
}
- (void) setHasSpawnpointId:(BOOL) _value_ {
  hasSpawnpointId_ = !!_value_;
}
@synthesize spawnpointId;
- (BOOL) hasEncounterId {
  return !!hasEncounterId_;
}
- (void) setHasEncounterId:(BOOL) _value_ {
  hasEncounterId_ = !!_value_;
}
@synthesize encounterId;
- (BOOL) hasPokemonId {
  return !!hasPokemonId_;
}
- (void) setHasPokemonId:(BOOL) _value_ {
  hasPokemonId_ = !!_value_;
}
@synthesize pokemonId;
- (BOOL) hasExpirationTimestampMs {
  return !!hasExpirationTimestampMs_;
}
- (void) setHasExpirationTimestampMs:(BOOL) _value_ {
  hasExpirationTimestampMs_ = !!_value_;
}
@synthesize expirationTimestampMs;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}

- (void) setLatitude:(Float64)lat {
    latitude = lat;
}
- (void) setLongitude:(Float64)lon {
    longitude = lon;
}
@synthesize longitude;
- (instancetype) init {
  if ((self = [super init])) {
    self.spawnpointId = @"";
    self.encounterId = 0L;
    self.pokemonId = PokemonIdMissingno;
    self.expirationTimestampMs = 0L;
    self.latitude = 0;
    self.longitude = 0;
  }
  return self;
}
static MapPokemon* defaultMapPokemonInstance = nil;
+ (void) initialize {
  if (self == [MapPokemon class]) {
    defaultMapPokemonInstance = [[MapPokemon alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMapPokemonInstance;
}
- (instancetype) defaultInstance {
  return defaultMapPokemonInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpawnpointId) {
    [output writeString:1 value:self.spawnpointId];
  }
  if (self.hasEncounterId) {
    [output writeFixed64:2 value:self.encounterId];
  }
  if (self.hasPokemonId) {
    [output writeEnum:3 value:self.pokemonId];
  }
  if (self.hasExpirationTimestampMs) {
    [output writeInt64:4 value:self.expirationTimestampMs];
  }
  if (self.hasLatitude) {
    [output writeDouble:5 value:self.latitude];
  }
  if (self.hasLongitude) {
    [output writeDouble:6 value:self.longitude];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSpawnpointId) {
    size_ += computeStringSize(1, self.spawnpointId);
  }
  if (self.hasEncounterId) {
    size_ += computeFixed64Size(2, self.encounterId);
  }
  if (self.hasPokemonId) {
    size_ += computeEnumSize(3, self.pokemonId);
  }
  if (self.hasExpirationTimestampMs) {
    size_ += computeInt64Size(4, self.expirationTimestampMs);
  }
  if (self.hasLatitude) {
    size_ += computeDoubleSize(5, self.latitude);
  }
  if (self.hasLongitude) {
    size_ += computeDoubleSize(6, self.longitude);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MapPokemon*) parseFromData:(NSData*) data {
  return (MapPokemon*)[[[MapPokemon builder] mergeFromData:data] build];
}
+ (MapPokemon*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapPokemon*)[[[MapPokemon builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MapPokemon*) parseFromInputStream:(NSInputStream*) input {
  return (MapPokemon*)[[[MapPokemon builder] mergeFromInputStream:input] build];
}
+ (MapPokemon*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapPokemon*)[[[MapPokemon builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MapPokemon*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MapPokemon*)[[[MapPokemon builder] mergeFromCodedInputStream:input] build];
}
+ (MapPokemon*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MapPokemon*)[[[MapPokemon builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MapPokemonBuilder*) builder {
  return [[MapPokemonBuilder alloc] init];
}
+ (MapPokemonBuilder*) builderWithPrototype:(MapPokemon*) prototype {
  return [[MapPokemon builder] mergeFrom:prototype];
}
- (MapPokemonBuilder*) builder {
  return [MapPokemon builder];
}
- (MapPokemonBuilder*) toBuilder {
  return [MapPokemon builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSpawnpointId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spawnpointId", self.spawnpointId];
  }
  if (self.hasEncounterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"encounterId", [NSNumber numberWithLongLong:self.encounterId]];
  }
  if (self.hasPokemonId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pokemonId", NSStringFromPokemonId(self.pokemonId)];
  }
  if (self.hasExpirationTimestampMs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expirationTimestampMs", [NSNumber numberWithLongLong:self.expirationTimestampMs]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSpawnpointId) {
    [dictionary setObject: self.spawnpointId forKey: @"spawnpointId"];
  }
  if (self.hasEncounterId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.encounterId] forKey: @"encounterId"];
  }
  if (self.hasPokemonId) {
    [dictionary setObject: @(self.pokemonId) forKey: @"pokemonId"];
  }
  if (self.hasExpirationTimestampMs) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.expirationTimestampMs] forKey: @"expirationTimestampMs"];
  }
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.latitude] forKey: @"latitude"];
  }
  if (self.hasLongitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.longitude] forKey: @"longitude"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MapPokemon class]]) {
    return NO;
  }
  MapPokemon *otherMessage = other;
  return
      self.hasSpawnpointId == otherMessage.hasSpawnpointId &&
      (!self.hasSpawnpointId || [self.spawnpointId isEqual:otherMessage.spawnpointId]) &&
      self.hasEncounterId == otherMessage.hasEncounterId &&
      (!self.hasEncounterId || self.encounterId == otherMessage.encounterId) &&
      self.hasPokemonId == otherMessage.hasPokemonId &&
      (!self.hasPokemonId || self.pokemonId == otherMessage.pokemonId) &&
      self.hasExpirationTimestampMs == otherMessage.hasExpirationTimestampMs &&
      (!self.hasExpirationTimestampMs || self.expirationTimestampMs == otherMessage.expirationTimestampMs) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSpawnpointId) {
    hashCode = hashCode * 31 + [self.spawnpointId hash];
  }
  if (self.hasEncounterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.encounterId] hash];
  }
  if (self.hasPokemonId) {
    hashCode = hashCode * 31 + self.pokemonId;
  }
  if (self.hasExpirationTimestampMs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.expirationTimestampMs] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MapPokemonBuilder()
@property (strong) MapPokemon* resultMapPokemon;
@end

@implementation MapPokemonBuilder
@synthesize resultMapPokemon;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMapPokemon = [[MapPokemon alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMapPokemon;
}
- (MapPokemonBuilder*) clear {
  self.resultMapPokemon = [[MapPokemon alloc] init];
  return self;
}
- (MapPokemonBuilder*) clone {
  return [MapPokemon builderWithPrototype:resultMapPokemon];
}
- (MapPokemon*) defaultInstance {
  return [MapPokemon defaultInstance];
}
- (MapPokemon*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MapPokemon*) buildPartial {
  MapPokemon* returnMe = resultMapPokemon;
  self.resultMapPokemon = nil;
  return returnMe;
}
- (MapPokemonBuilder*) mergeFrom:(MapPokemon*) other {
  if (other == [MapPokemon defaultInstance]) {
    return self;
  }
  if (other.hasSpawnpointId) {
    [self setSpawnpointId:other.spawnpointId];
  }
  if (other.hasEncounterId) {
    [self setEncounterId:other.encounterId];
  }
  if (other.hasPokemonId) {
    [self setPokemonId:other.pokemonId];
  }
  if (other.hasExpirationTimestampMs) {
    [self setExpirationTimestampMs:other.expirationTimestampMs];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MapPokemonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MapPokemonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSpawnpointId:[input readString]];
        break;
      }
      case 17: {
        [self setEncounterId:[input readFixed64]];
        break;
      }
      case 24: {
        PokemonId value = (PokemonId)[input readEnum];
        if (PokemonIdIsValidValue(value)) {
          [self setPokemonId:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setExpirationTimestampMs:[input readInt64]];
        break;
      }
      case 41: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 49: {
        [self setLongitude:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasSpawnpointId {
  return resultMapPokemon.hasSpawnpointId;
}
- (NSString*) spawnpointId {
  return resultMapPokemon.spawnpointId;
}
- (MapPokemonBuilder*) setSpawnpointId:(NSString*) value {
  resultMapPokemon.hasSpawnpointId = YES;
  resultMapPokemon.spawnpointId = value;
  return self;
}
- (MapPokemonBuilder*) clearSpawnpointId {
  resultMapPokemon.hasSpawnpointId = NO;
  resultMapPokemon.spawnpointId = @"";
  return self;
}
- (BOOL) hasEncounterId {
  return resultMapPokemon.hasEncounterId;
}
- (UInt64) encounterId {
  return resultMapPokemon.encounterId;
}
- (MapPokemonBuilder*) setEncounterId:(UInt64) value {
  resultMapPokemon.hasEncounterId = YES;
  resultMapPokemon.encounterId = value;
  return self;
}
- (MapPokemonBuilder*) clearEncounterId {
  resultMapPokemon.hasEncounterId = NO;
  resultMapPokemon.encounterId = 0L;
  return self;
}
- (BOOL) hasPokemonId {
  return resultMapPokemon.hasPokemonId;
}
- (PokemonId) pokemonId {
  return resultMapPokemon.pokemonId;
}
- (MapPokemonBuilder*) setPokemonId:(PokemonId) value {
  resultMapPokemon.hasPokemonId = YES;
  resultMapPokemon.pokemonId = value;
  return self;
}
- (MapPokemonBuilder*) clearPokemonId {
  resultMapPokemon.hasPokemonId = NO;
  resultMapPokemon.pokemonId = PokemonIdMissingno;
  return self;
}
- (BOOL) hasExpirationTimestampMs {
  return resultMapPokemon.hasExpirationTimestampMs;
}
- (SInt64) expirationTimestampMs {
  return resultMapPokemon.expirationTimestampMs;
}
- (MapPokemonBuilder*) setExpirationTimestampMs:(SInt64) value {
  resultMapPokemon.hasExpirationTimestampMs = YES;
  resultMapPokemon.expirationTimestampMs = value;
  return self;
}
- (MapPokemonBuilder*) clearExpirationTimestampMs {
  resultMapPokemon.hasExpirationTimestampMs = NO;
  resultMapPokemon.expirationTimestampMs = 0L;
  return self;
}
- (BOOL) hasLatitude {
  return resultMapPokemon.hasLatitude;
}
- (Float64) latitude {
  return resultMapPokemon.latitude;
}
- (MapPokemonBuilder*) setLatitude:(Float64) value {
  resultMapPokemon.hasLatitude = YES;
  resultMapPokemon.latitude = value;
  return self;
}
- (MapPokemonBuilder*) clearLatitude {
  resultMapPokemon.hasLatitude = NO;
  resultMapPokemon.latitude = 0;
  return self;
}
- (BOOL) hasLongitude {
  return resultMapPokemon.hasLongitude;
}
- (Float64) longitude {
  return resultMapPokemon.longitude;
}
- (MapPokemonBuilder*) setLongitude:(Float64) value {
  resultMapPokemon.hasLongitude = YES;
  resultMapPokemon.longitude = value;
  return self;
}
- (MapPokemonBuilder*) clearLongitude {
  resultMapPokemon.hasLongitude = NO;
  resultMapPokemon.longitude = 0;
  return self;
}
@end

@interface NearbyPokemon ()
@property PokemonId pokemonId;
@property Float32 distanceInMeters;
@property UInt64 encounterId;
@end

@implementation NearbyPokemon

- (BOOL) hasPokemonId {
  return !!hasPokemonId_;
}
- (void) setHasPokemonId:(BOOL) _value_ {
  hasPokemonId_ = !!_value_;
}
@synthesize pokemonId;
- (BOOL) hasDistanceInMeters {
  return !!hasDistanceInMeters_;
}
- (void) setHasDistanceInMeters:(BOOL) _value_ {
  hasDistanceInMeters_ = !!_value_;
}
@synthesize distanceInMeters;
- (BOOL) hasEncounterId {
  return !!hasEncounterId_;
}
- (void) setHasEncounterId:(BOOL) _value_ {
  hasEncounterId_ = !!_value_;
}
@synthesize encounterId;
- (instancetype) init {
  if ((self = [super init])) {
    self.pokemonId = PokemonIdMissingno;
    self.distanceInMeters = 0;
    self.encounterId = 0L;
  }
  return self;
}
static NearbyPokemon* defaultNearbyPokemonInstance = nil;
+ (void) initialize {
  if (self == [NearbyPokemon class]) {
    defaultNearbyPokemonInstance = [[NearbyPokemon alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNearbyPokemonInstance;
}
- (instancetype) defaultInstance {
  return defaultNearbyPokemonInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPokemonId) {
    [output writeEnum:1 value:self.pokemonId];
  }
  if (self.hasDistanceInMeters) {
    [output writeFloat:2 value:self.distanceInMeters];
  }
  if (self.hasEncounterId) {
    [output writeFixed64:3 value:self.encounterId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPokemonId) {
    size_ += computeEnumSize(1, self.pokemonId);
  }
  if (self.hasDistanceInMeters) {
    size_ += computeFloatSize(2, self.distanceInMeters);
  }
  if (self.hasEncounterId) {
    size_ += computeFixed64Size(3, self.encounterId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NearbyPokemon*) parseFromData:(NSData*) data {
  return (NearbyPokemon*)[[[NearbyPokemon builder] mergeFromData:data] build];
}
+ (NearbyPokemon*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NearbyPokemon*)[[[NearbyPokemon builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NearbyPokemon*) parseFromInputStream:(NSInputStream*) input {
  return (NearbyPokemon*)[[[NearbyPokemon builder] mergeFromInputStream:input] build];
}
+ (NearbyPokemon*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NearbyPokemon*)[[[NearbyPokemon builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NearbyPokemon*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NearbyPokemon*)[[[NearbyPokemon builder] mergeFromCodedInputStream:input] build];
}
+ (NearbyPokemon*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NearbyPokemon*)[[[NearbyPokemon builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NearbyPokemonBuilder*) builder {
  return [[NearbyPokemonBuilder alloc] init];
}
+ (NearbyPokemonBuilder*) builderWithPrototype:(NearbyPokemon*) prototype {
  return [[NearbyPokemon builder] mergeFrom:prototype];
}
- (NearbyPokemonBuilder*) builder {
  return [NearbyPokemon builder];
}
- (NearbyPokemonBuilder*) toBuilder {
  return [NearbyPokemon builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPokemonId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pokemonId", NSStringFromPokemonId(self.pokemonId)];
  }
  if (self.hasDistanceInMeters) {
    [output appendFormat:@"%@%@: %@\n", indent, @"distanceInMeters", [NSNumber numberWithFloat:self.distanceInMeters]];
  }
  if (self.hasEncounterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"encounterId", [NSNumber numberWithLongLong:self.encounterId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPokemonId) {
    [dictionary setObject: @(self.pokemonId) forKey: @"pokemonId"];
  }
  if (self.hasDistanceInMeters) {
    [dictionary setObject: [NSNumber numberWithFloat:self.distanceInMeters] forKey: @"distanceInMeters"];
  }
  if (self.hasEncounterId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.encounterId] forKey: @"encounterId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NearbyPokemon class]]) {
    return NO;
  }
  NearbyPokemon *otherMessage = other;
  return
      self.hasPokemonId == otherMessage.hasPokemonId &&
      (!self.hasPokemonId || self.pokemonId == otherMessage.pokemonId) &&
      self.hasDistanceInMeters == otherMessage.hasDistanceInMeters &&
      (!self.hasDistanceInMeters || self.distanceInMeters == otherMessage.distanceInMeters) &&
      self.hasEncounterId == otherMessage.hasEncounterId &&
      (!self.hasEncounterId || self.encounterId == otherMessage.encounterId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPokemonId) {
    hashCode = hashCode * 31 + self.pokemonId;
  }
  if (self.hasDistanceInMeters) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.distanceInMeters] hash];
  }
  if (self.hasEncounterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.encounterId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NearbyPokemonBuilder()
@property (strong) NearbyPokemon* resultNearbyPokemon;
@end

@implementation NearbyPokemonBuilder
@synthesize resultNearbyPokemon;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNearbyPokemon = [[NearbyPokemon alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNearbyPokemon;
}
- (NearbyPokemonBuilder*) clear {
  self.resultNearbyPokemon = [[NearbyPokemon alloc] init];
  return self;
}
- (NearbyPokemonBuilder*) clone {
  return [NearbyPokemon builderWithPrototype:resultNearbyPokemon];
}
- (NearbyPokemon*) defaultInstance {
  return [NearbyPokemon defaultInstance];
}
- (NearbyPokemon*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NearbyPokemon*) buildPartial {
  NearbyPokemon* returnMe = resultNearbyPokemon;
  self.resultNearbyPokemon = nil;
  return returnMe;
}
- (NearbyPokemonBuilder*) mergeFrom:(NearbyPokemon*) other {
  if (other == [NearbyPokemon defaultInstance]) {
    return self;
  }
  if (other.hasPokemonId) {
    [self setPokemonId:other.pokemonId];
  }
  if (other.hasDistanceInMeters) {
    [self setDistanceInMeters:other.distanceInMeters];
  }
  if (other.hasEncounterId) {
    [self setEncounterId:other.encounterId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NearbyPokemonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NearbyPokemonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PokemonId value = (PokemonId)[input readEnum];
        if (PokemonIdIsValidValue(value)) {
          [self setPokemonId:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 21: {
        [self setDistanceInMeters:[input readFloat]];
        break;
      }
      case 25: {
        [self setEncounterId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasPokemonId {
  return resultNearbyPokemon.hasPokemonId;
}
- (PokemonId) pokemonId {
  return resultNearbyPokemon.pokemonId;
}
- (NearbyPokemonBuilder*) setPokemonId:(PokemonId) value {
  resultNearbyPokemon.hasPokemonId = YES;
  resultNearbyPokemon.pokemonId = value;
  return self;
}
- (NearbyPokemonBuilder*) clearPokemonId {
  resultNearbyPokemon.hasPokemonId = NO;
  resultNearbyPokemon.pokemonId = PokemonIdMissingno;
  return self;
}
- (BOOL) hasDistanceInMeters {
  return resultNearbyPokemon.hasDistanceInMeters;
}
- (Float32) distanceInMeters {
  return resultNearbyPokemon.distanceInMeters;
}
- (NearbyPokemonBuilder*) setDistanceInMeters:(Float32) value {
  resultNearbyPokemon.hasDistanceInMeters = YES;
  resultNearbyPokemon.distanceInMeters = value;
  return self;
}
- (NearbyPokemonBuilder*) clearDistanceInMeters {
  resultNearbyPokemon.hasDistanceInMeters = NO;
  resultNearbyPokemon.distanceInMeters = 0;
  return self;
}
- (BOOL) hasEncounterId {
  return resultNearbyPokemon.hasEncounterId;
}
- (UInt64) encounterId {
  return resultNearbyPokemon.encounterId;
}
- (NearbyPokemonBuilder*) setEncounterId:(UInt64) value {
  resultNearbyPokemon.hasEncounterId = YES;
  resultNearbyPokemon.encounterId = value;
  return self;
}
- (NearbyPokemonBuilder*) clearEncounterId {
  resultNearbyPokemon.hasEncounterId = NO;
  resultNearbyPokemon.encounterId = 0L;
  return self;
}
@end

@interface WildPokemon ()
@property UInt64 encounterId;
@property SInt64 lastModifiedTimestampMs;
@property Float64 latitude;
@property Float64 longitude;
@property (strong) NSString* spawnpointId;
@property (strong) PokemonData* pokemonData;
@property SInt32 timeTillHiddenMs;
@end

@implementation WildPokemon

- (BOOL) hasEncounterId {
  return !!hasEncounterId_;
}
- (void) setHasEncounterId:(BOOL) _value_ {
  hasEncounterId_ = !!_value_;
}
@synthesize encounterId;
- (BOOL) hasLastModifiedTimestampMs {
  return !!hasLastModifiedTimestampMs_;
}
- (void) setHasLastModifiedTimestampMs:(BOOL) _value_ {
  hasLastModifiedTimestampMs_ = !!_value_;
}
@synthesize lastModifiedTimestampMs;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasSpawnpointId {
  return !!hasSpawnpointId_;
}
- (void) setHasSpawnpointId:(BOOL) _value_ {
  hasSpawnpointId_ = !!_value_;
}
@synthesize spawnpointId;
- (BOOL) hasPokemonData {
  return !!hasPokemonData_;
}
- (void) setHasPokemonData:(BOOL) _value_ {
  hasPokemonData_ = !!_value_;
}
@synthesize pokemonData;
- (BOOL) hasTimeTillHiddenMs {
  return !!hasTimeTillHiddenMs_;
}
- (void) setHasTimeTillHiddenMs:(BOOL) _value_ {
  hasTimeTillHiddenMs_ = !!_value_;
}
@synthesize timeTillHiddenMs;
- (instancetype) init {
  if ((self = [super init])) {
    self.encounterId = 0L;
    self.lastModifiedTimestampMs = 0L;
    self.latitude = 0;
    self.longitude = 0;
    self.spawnpointId = @"";
    self.pokemonData = [PokemonData defaultInstance];
    self.timeTillHiddenMs = 0;
  }
  return self;
}
static WildPokemon* defaultWildPokemonInstance = nil;
+ (void) initialize {
  if (self == [WildPokemon class]) {
    defaultWildPokemonInstance = [[WildPokemon alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWildPokemonInstance;
}
- (instancetype) defaultInstance {
  return defaultWildPokemonInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEncounterId) {
    [output writeFixed64:1 value:self.encounterId];
  }
  if (self.hasLastModifiedTimestampMs) {
    [output writeInt64:2 value:self.lastModifiedTimestampMs];
  }
  if (self.hasLatitude) {
    [output writeDouble:3 value:self.latitude];
  }
  if (self.hasLongitude) {
    [output writeDouble:4 value:self.longitude];
  }
  if (self.hasSpawnpointId) {
    [output writeString:5 value:self.spawnpointId];
  }
  if (self.hasPokemonData) {
    [output writeMessage:7 value:self.pokemonData];
  }
  if (self.hasTimeTillHiddenMs) {
    [output writeInt32:11 value:self.timeTillHiddenMs];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEncounterId) {
    size_ += computeFixed64Size(1, self.encounterId);
  }
  if (self.hasLastModifiedTimestampMs) {
    size_ += computeInt64Size(2, self.lastModifiedTimestampMs);
  }
  if (self.hasLatitude) {
    size_ += computeDoubleSize(3, self.latitude);
  }
  if (self.hasLongitude) {
    size_ += computeDoubleSize(4, self.longitude);
  }
  if (self.hasSpawnpointId) {
    size_ += computeStringSize(5, self.spawnpointId);
  }
  if (self.hasPokemonData) {
    size_ += computeMessageSize(7, self.pokemonData);
  }
  if (self.hasTimeTillHiddenMs) {
    size_ += computeInt32Size(11, self.timeTillHiddenMs);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WildPokemon*) parseFromData:(NSData*) data {
  return (WildPokemon*)[[[WildPokemon builder] mergeFromData:data] build];
}
+ (WildPokemon*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WildPokemon*)[[[WildPokemon builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WildPokemon*) parseFromInputStream:(NSInputStream*) input {
  return (WildPokemon*)[[[WildPokemon builder] mergeFromInputStream:input] build];
}
+ (WildPokemon*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WildPokemon*)[[[WildPokemon builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WildPokemon*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WildPokemon*)[[[WildPokemon builder] mergeFromCodedInputStream:input] build];
}
+ (WildPokemon*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WildPokemon*)[[[WildPokemon builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WildPokemonBuilder*) builder {
  return [[WildPokemonBuilder alloc] init];
}
+ (WildPokemonBuilder*) builderWithPrototype:(WildPokemon*) prototype {
  return [[WildPokemon builder] mergeFrom:prototype];
}
- (WildPokemonBuilder*) builder {
  return [WildPokemon builder];
}
- (WildPokemonBuilder*) toBuilder {
  return [WildPokemon builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEncounterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"encounterId", [NSNumber numberWithLongLong:self.encounterId]];
  }
  if (self.hasLastModifiedTimestampMs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastModifiedTimestampMs", [NSNumber numberWithLongLong:self.lastModifiedTimestampMs]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  if (self.hasSpawnpointId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spawnpointId", self.spawnpointId];
  }
  if (self.hasPokemonData) {
    [output appendFormat:@"%@%@ {\n", indent, @"pokemonData"];
    [self.pokemonData writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTimeTillHiddenMs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeTillHiddenMs", [NSNumber numberWithInteger:self.timeTillHiddenMs]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEncounterId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.encounterId] forKey: @"encounterId"];
  }
  if (self.hasLastModifiedTimestampMs) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastModifiedTimestampMs] forKey: @"lastModifiedTimestampMs"];
  }
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.latitude] forKey: @"latitude"];
  }
  if (self.hasLongitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.longitude] forKey: @"longitude"];
  }
  if (self.hasSpawnpointId) {
    [dictionary setObject: self.spawnpointId forKey: @"spawnpointId"];
  }
  if (self.hasPokemonData) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pokemonData storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pokemonData"];
  }
  if (self.hasTimeTillHiddenMs) {
    [dictionary setObject: [NSNumber numberWithInteger:self.timeTillHiddenMs] forKey: @"timeTillHiddenMs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WildPokemon class]]) {
    return NO;
  }
  WildPokemon *otherMessage = other;
  return
      self.hasEncounterId == otherMessage.hasEncounterId &&
      (!self.hasEncounterId || self.encounterId == otherMessage.encounterId) &&
      self.hasLastModifiedTimestampMs == otherMessage.hasLastModifiedTimestampMs &&
      (!self.hasLastModifiedTimestampMs || self.lastModifiedTimestampMs == otherMessage.lastModifiedTimestampMs) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasSpawnpointId == otherMessage.hasSpawnpointId &&
      (!self.hasSpawnpointId || [self.spawnpointId isEqual:otherMessage.spawnpointId]) &&
      self.hasPokemonData == otherMessage.hasPokemonData &&
      (!self.hasPokemonData || [self.pokemonData isEqual:otherMessage.pokemonData]) &&
      self.hasTimeTillHiddenMs == otherMessage.hasTimeTillHiddenMs &&
      (!self.hasTimeTillHiddenMs || self.timeTillHiddenMs == otherMessage.timeTillHiddenMs) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEncounterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.encounterId] hash];
  }
  if (self.hasLastModifiedTimestampMs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastModifiedTimestampMs] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  if (self.hasSpawnpointId) {
    hashCode = hashCode * 31 + [self.spawnpointId hash];
  }
  if (self.hasPokemonData) {
    hashCode = hashCode * 31 + [self.pokemonData hash];
  }
  if (self.hasTimeTillHiddenMs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.timeTillHiddenMs] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WildPokemonBuilder()
@property (strong) WildPokemon* resultWildPokemon;
@end

@implementation WildPokemonBuilder
@synthesize resultWildPokemon;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWildPokemon = [[WildPokemon alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWildPokemon;
}
- (WildPokemonBuilder*) clear {
  self.resultWildPokemon = [[WildPokemon alloc] init];
  return self;
}
- (WildPokemonBuilder*) clone {
  return [WildPokemon builderWithPrototype:resultWildPokemon];
}
- (WildPokemon*) defaultInstance {
  return [WildPokemon defaultInstance];
}
- (WildPokemon*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WildPokemon*) buildPartial {
  WildPokemon* returnMe = resultWildPokemon;
  self.resultWildPokemon = nil;
  return returnMe;
}
- (WildPokemonBuilder*) mergeFrom:(WildPokemon*) other {
  if (other == [WildPokemon defaultInstance]) {
    return self;
  }
  if (other.hasEncounterId) {
    [self setEncounterId:other.encounterId];
  }
  if (other.hasLastModifiedTimestampMs) {
    [self setLastModifiedTimestampMs:other.lastModifiedTimestampMs];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasSpawnpointId) {
    [self setSpawnpointId:other.spawnpointId];
  }
  if (other.hasPokemonData) {
    [self mergePokemonData:other.pokemonData];
  }
  if (other.hasTimeTillHiddenMs) {
    [self setTimeTillHiddenMs:other.timeTillHiddenMs];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WildPokemonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WildPokemonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setEncounterId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setLastModifiedTimestampMs:[input readInt64]];
        break;
      }
      case 25: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 33: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 42: {
        [self setSpawnpointId:[input readString]];
        break;
      }
      case 58: {
        PokemonDataBuilder* subBuilder = [PokemonData builder];
        if (self.hasPokemonData) {
          [subBuilder mergeFrom:self.pokemonData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPokemonData:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        [self setTimeTillHiddenMs:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasEncounterId {
  return resultWildPokemon.hasEncounterId;
}
- (UInt64) encounterId {
  return resultWildPokemon.encounterId;
}
- (WildPokemonBuilder*) setEncounterId:(UInt64) value {
  resultWildPokemon.hasEncounterId = YES;
  resultWildPokemon.encounterId = value;
  return self;
}
- (WildPokemonBuilder*) clearEncounterId {
  resultWildPokemon.hasEncounterId = NO;
  resultWildPokemon.encounterId = 0L;
  return self;
}
- (BOOL) hasLastModifiedTimestampMs {
  return resultWildPokemon.hasLastModifiedTimestampMs;
}
- (SInt64) lastModifiedTimestampMs {
  return resultWildPokemon.lastModifiedTimestampMs;
}
- (WildPokemonBuilder*) setLastModifiedTimestampMs:(SInt64) value {
  resultWildPokemon.hasLastModifiedTimestampMs = YES;
  resultWildPokemon.lastModifiedTimestampMs = value;
  return self;
}
- (WildPokemonBuilder*) clearLastModifiedTimestampMs {
  resultWildPokemon.hasLastModifiedTimestampMs = NO;
  resultWildPokemon.lastModifiedTimestampMs = 0L;
  return self;
}
- (BOOL) hasLatitude {
  return resultWildPokemon.hasLatitude;
}
- (Float64) latitude {
  return resultWildPokemon.latitude;
}
- (WildPokemonBuilder*) setLatitude:(Float64) value {
  resultWildPokemon.hasLatitude = YES;
  resultWildPokemon.latitude = value;
  return self;
}
- (WildPokemonBuilder*) clearLatitude {
  resultWildPokemon.hasLatitude = NO;
  resultWildPokemon.latitude = 0;
  return self;
}
- (BOOL) hasLongitude {
  return resultWildPokemon.hasLongitude;
}
- (Float64) longitude {
  return resultWildPokemon.longitude;
}
- (WildPokemonBuilder*) setLongitude:(Float64) value {
  resultWildPokemon.hasLongitude = YES;
  resultWildPokemon.longitude = value;
  return self;
}
- (WildPokemonBuilder*) clearLongitude {
  resultWildPokemon.hasLongitude = NO;
  resultWildPokemon.longitude = 0;
  return self;
}
- (BOOL) hasSpawnpointId {
  return resultWildPokemon.hasSpawnpointId;
}
- (NSString*) spawnpointId {
  return resultWildPokemon.spawnpointId;
}
- (WildPokemonBuilder*) setSpawnpointId:(NSString*) value {
  resultWildPokemon.hasSpawnpointId = YES;
  resultWildPokemon.spawnpointId = value;
  return self;
}
- (WildPokemonBuilder*) clearSpawnpointId {
  resultWildPokemon.hasSpawnpointId = NO;
  resultWildPokemon.spawnpointId = @"";
  return self;
}
- (BOOL) hasPokemonData {
  return resultWildPokemon.hasPokemonData;
}
- (PokemonData*) pokemonData {
  return resultWildPokemon.pokemonData;
}
- (WildPokemonBuilder*) setPokemonData:(PokemonData*) value {
  resultWildPokemon.hasPokemonData = YES;
  resultWildPokemon.pokemonData = value;
  return self;
}
- (WildPokemonBuilder*) setPokemonDataBuilder:(PokemonDataBuilder*) builderForValue {
  return [self setPokemonData:[builderForValue build]];
}
- (WildPokemonBuilder*) mergePokemonData:(PokemonData*) value {
  if (resultWildPokemon.hasPokemonData &&
      resultWildPokemon.pokemonData != [PokemonData defaultInstance]) {
    resultWildPokemon.pokemonData =
      [[[PokemonData builderWithPrototype:resultWildPokemon.pokemonData] mergeFrom:value] buildPartial];
  } else {
    resultWildPokemon.pokemonData = value;
  }
  resultWildPokemon.hasPokemonData = YES;
  return self;
}
- (WildPokemonBuilder*) clearPokemonData {
  resultWildPokemon.hasPokemonData = NO;
  resultWildPokemon.pokemonData = [PokemonData defaultInstance];
  return self;
}
- (BOOL) hasTimeTillHiddenMs {
  return resultWildPokemon.hasTimeTillHiddenMs;
}
- (SInt32) timeTillHiddenMs {
  return resultWildPokemon.timeTillHiddenMs;
}
- (WildPokemonBuilder*) setTimeTillHiddenMs:(SInt32) value {
  resultWildPokemon.hasTimeTillHiddenMs = YES;
  resultWildPokemon.timeTillHiddenMs = value;
  return self;
}
- (WildPokemonBuilder*) clearTimeTillHiddenMs {
  resultWildPokemon.hasTimeTillHiddenMs = NO;
  resultWildPokemon.timeTillHiddenMs = 0;
  return self;
}
@end

@interface PokemonData ()
@property UInt64 id;
@property PokemonId pokemonId;
@property SInt32 cp;
@property SInt32 stamina;
@property SInt32 staminaMax;
@property (strong) NSData* move1;
@property (strong) NSData* move2;
@property SInt32 deployedFortId;
@property (strong) NSString* ownerName;
@property BOOL isEgg;
@property SInt32 eggKmWalkedTarget;
@property SInt32 eggKmWalkedStart;
@property SInt32 origin;
@property Float32 heightM;
@property Float32 weightKg;
@property SInt32 individualAttack;
@property SInt32 individualDefense;
@property SInt32 individualStamina;
@property SInt32 cpMultiplier;
@property SInt32 pokeball;
@property UInt64 capturedCellId;
@property SInt32 battlesAttacked;
@property SInt32 battlesDefended;
@property SInt32 eggIncubatorId;
@property UInt64 creationTimeMs;
@property SInt32 numUpgrades;
@property SInt32 additionalCpMultiplier;
@property SInt32 favorite;
@property (strong) NSString* nickname;
@property SInt32 fromFort;
@end

@implementation PokemonData

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasPokemonId {
  return !!hasPokemonId_;
}
- (void) setHasPokemonId:(BOOL) _value_ {
  hasPokemonId_ = !!_value_;
}
@synthesize pokemonId;
- (BOOL) hasCp {
  return !!hasCp_;
}
- (void) setHasCp:(BOOL) _value_ {
  hasCp_ = !!_value_;
}
@synthesize cp;
- (BOOL) hasStamina {
  return !!hasStamina_;
}
- (void) setHasStamina:(BOOL) _value_ {
  hasStamina_ = !!_value_;
}
@synthesize stamina;
- (BOOL) hasStaminaMax {
  return !!hasStaminaMax_;
}
- (void) setHasStaminaMax:(BOOL) _value_ {
  hasStaminaMax_ = !!_value_;
}
@synthesize staminaMax;
- (BOOL) hasMove1 {
  return !!hasMove1_;
}
- (void) setHasMove1:(BOOL) _value_ {
  hasMove1_ = !!_value_;
}
@synthesize move1;
- (BOOL) hasMove2 {
  return !!hasMove2_;
}
- (void) setHasMove2:(BOOL) _value_ {
  hasMove2_ = !!_value_;
}
@synthesize move2;
- (BOOL) hasDeployedFortId {
  return !!hasDeployedFortId_;
}
- (void) setHasDeployedFortId:(BOOL) _value_ {
  hasDeployedFortId_ = !!_value_;
}
@synthesize deployedFortId;
- (BOOL) hasOwnerName {
  return !!hasOwnerName_;
}
- (void) setHasOwnerName:(BOOL) _value_ {
  hasOwnerName_ = !!_value_;
}
@synthesize ownerName;
- (BOOL) hasIsEgg {
  return !!hasIsEgg_;
}
- (void) setHasIsEgg:(BOOL) _value_ {
  hasIsEgg_ = !!_value_;
}
- (BOOL) isEgg {
  return !!isEgg_;
}
- (void) setIsEgg:(BOOL) _value_ {
  isEgg_ = !!_value_;
}
- (BOOL) hasEggKmWalkedTarget {
  return !!hasEggKmWalkedTarget_;
}
- (void) setHasEggKmWalkedTarget:(BOOL) _value_ {
  hasEggKmWalkedTarget_ = !!_value_;
}
@synthesize eggKmWalkedTarget;
- (BOOL) hasEggKmWalkedStart {
  return !!hasEggKmWalkedStart_;
}
- (void) setHasEggKmWalkedStart:(BOOL) _value_ {
  hasEggKmWalkedStart_ = !!_value_;
}
@synthesize eggKmWalkedStart;
- (BOOL) hasOrigin {
  return !!hasOrigin_;
}
- (void) setHasOrigin:(BOOL) _value_ {
  hasOrigin_ = !!_value_;
}
@synthesize origin;
- (BOOL) hasHeightM {
  return !!hasHeightM_;
}
- (void) setHasHeightM:(BOOL) _value_ {
  hasHeightM_ = !!_value_;
}
@synthesize heightM;
- (BOOL) hasWeightKg {
  return !!hasWeightKg_;
}
- (void) setHasWeightKg:(BOOL) _value_ {
  hasWeightKg_ = !!_value_;
}
@synthesize weightKg;
- (BOOL) hasIndividualAttack {
  return !!hasIndividualAttack_;
}
- (void) setHasIndividualAttack:(BOOL) _value_ {
  hasIndividualAttack_ = !!_value_;
}
@synthesize individualAttack;
- (BOOL) hasIndividualDefense {
  return !!hasIndividualDefense_;
}
- (void) setHasIndividualDefense:(BOOL) _value_ {
  hasIndividualDefense_ = !!_value_;
}
@synthesize individualDefense;
- (BOOL) hasIndividualStamina {
  return !!hasIndividualStamina_;
}
- (void) setHasIndividualStamina:(BOOL) _value_ {
  hasIndividualStamina_ = !!_value_;
}
@synthesize individualStamina;
- (BOOL) hasCpMultiplier {
  return !!hasCpMultiplier_;
}
- (void) setHasCpMultiplier:(BOOL) _value_ {
  hasCpMultiplier_ = !!_value_;
}
@synthesize cpMultiplier;
- (BOOL) hasPokeball {
  return !!hasPokeball_;
}
- (void) setHasPokeball:(BOOL) _value_ {
  hasPokeball_ = !!_value_;
}
@synthesize pokeball;
- (BOOL) hasCapturedCellId {
  return !!hasCapturedCellId_;
}
- (void) setHasCapturedCellId:(BOOL) _value_ {
  hasCapturedCellId_ = !!_value_;
}
@synthesize capturedCellId;
- (BOOL) hasBattlesAttacked {
  return !!hasBattlesAttacked_;
}
- (void) setHasBattlesAttacked:(BOOL) _value_ {
  hasBattlesAttacked_ = !!_value_;
}
@synthesize battlesAttacked;
- (BOOL) hasBattlesDefended {
  return !!hasBattlesDefended_;
}
- (void) setHasBattlesDefended:(BOOL) _value_ {
  hasBattlesDefended_ = !!_value_;
}
@synthesize battlesDefended;
- (BOOL) hasEggIncubatorId {
  return !!hasEggIncubatorId_;
}
- (void) setHasEggIncubatorId:(BOOL) _value_ {
  hasEggIncubatorId_ = !!_value_;
}
@synthesize eggIncubatorId;
- (BOOL) hasCreationTimeMs {
  return !!hasCreationTimeMs_;
}
- (void) setHasCreationTimeMs:(BOOL) _value_ {
  hasCreationTimeMs_ = !!_value_;
}
@synthesize creationTimeMs;
- (BOOL) hasNumUpgrades {
  return !!hasNumUpgrades_;
}
- (void) setHasNumUpgrades:(BOOL) _value_ {
  hasNumUpgrades_ = !!_value_;
}
@synthesize numUpgrades;
- (BOOL) hasAdditionalCpMultiplier {
  return !!hasAdditionalCpMultiplier_;
}
- (void) setHasAdditionalCpMultiplier:(BOOL) _value_ {
  hasAdditionalCpMultiplier_ = !!_value_;
}
@synthesize additionalCpMultiplier;
- (BOOL) hasFavorite {
  return !!hasFavorite_;
}
- (void) setHasFavorite:(BOOL) _value_ {
  hasFavorite_ = !!_value_;
}
@synthesize favorite;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (BOOL) hasFromFort {
  return !!hasFromFort_;
}
- (void) setHasFromFort:(BOOL) _value_ {
  hasFromFort_ = !!_value_;
}
@synthesize fromFort;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.pokemonId = PokemonIdMissingno;
    self.cp = 0;
    self.stamina = 0;
    self.staminaMax = 0;
    self.move1 = [NSData data];
    self.move2 = [NSData data];
    self.deployedFortId = 0;
    self.ownerName = @"";
    self.isEgg = NO;
    self.eggKmWalkedTarget = 0;
    self.eggKmWalkedStart = 0;
    self.origin = 0;
    self.heightM = 0;
    self.weightKg = 0;
    self.individualAttack = 0;
    self.individualDefense = 0;
    self.individualStamina = 0;
    self.cpMultiplier = 0;
    self.pokeball = 0;
    self.capturedCellId = 0L;
    self.battlesAttacked = 0;
    self.battlesDefended = 0;
    self.eggIncubatorId = 0;
    self.creationTimeMs = 0L;
    self.numUpgrades = 0;
    self.additionalCpMultiplier = 0;
    self.favorite = 0;
    self.nickname = @"";
    self.fromFort = 0;
  }
  return self;
}
static PokemonData* defaultPokemonDataInstance = nil;
+ (void) initialize {
  if (self == [PokemonData class]) {
    defaultPokemonDataInstance = [[PokemonData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPokemonDataInstance;
}
- (instancetype) defaultInstance {
  return defaultPokemonDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeFixed64:1 value:self.id];
  }
  if (self.hasPokemonId) {
    [output writeEnum:2 value:self.pokemonId];
  }
  if (self.hasCp) {
    [output writeInt32:3 value:self.cp];
  }
  if (self.hasStamina) {
    [output writeInt32:4 value:self.stamina];
  }
  if (self.hasStaminaMax) {
    [output writeInt32:5 value:self.staminaMax];
  }
  if (self.hasMove1) {
    [output writeData:6 value:self.move1];
  }
  if (self.hasMove2) {
    [output writeData:7 value:self.move2];
  }
  if (self.hasDeployedFortId) {
    [output writeInt32:8 value:self.deployedFortId];
  }
  if (self.hasOwnerName) {
    [output writeString:9 value:self.ownerName];
  }
  if (self.hasIsEgg) {
    [output writeBool:10 value:self.isEgg];
  }
  if (self.hasEggKmWalkedTarget) {
    [output writeInt32:11 value:self.eggKmWalkedTarget];
  }
  if (self.hasEggKmWalkedStart) {
    [output writeInt32:12 value:self.eggKmWalkedStart];
  }
  if (self.hasOrigin) {
    [output writeInt32:14 value:self.origin];
  }
  if (self.hasHeightM) {
    [output writeFloat:15 value:self.heightM];
  }
  if (self.hasWeightKg) {
    [output writeFloat:16 value:self.weightKg];
  }
  if (self.hasIndividualAttack) {
    [output writeInt32:17 value:self.individualAttack];
  }
  if (self.hasIndividualDefense) {
    [output writeInt32:18 value:self.individualDefense];
  }
  if (self.hasIndividualStamina) {
    [output writeInt32:19 value:self.individualStamina];
  }
  if (self.hasCpMultiplier) {
    [output writeInt32:20 value:self.cpMultiplier];
  }
  if (self.hasPokeball) {
    [output writeInt32:21 value:self.pokeball];
  }
  if (self.hasCapturedCellId) {
    [output writeUInt64:22 value:self.capturedCellId];
  }
  if (self.hasBattlesAttacked) {
    [output writeInt32:23 value:self.battlesAttacked];
  }
  if (self.hasBattlesDefended) {
    [output writeInt32:24 value:self.battlesDefended];
  }
  if (self.hasEggIncubatorId) {
    [output writeInt32:25 value:self.eggIncubatorId];
  }
  if (self.hasCreationTimeMs) {
    [output writeUInt64:26 value:self.creationTimeMs];
  }
  if (self.hasNumUpgrades) {
    [output writeInt32:27 value:self.numUpgrades];
  }
  if (self.hasAdditionalCpMultiplier) {
    [output writeInt32:28 value:self.additionalCpMultiplier];
  }
  if (self.hasFavorite) {
    [output writeInt32:29 value:self.favorite];
  }
  if (self.hasNickname) {
    [output writeString:30 value:self.nickname];
  }
  if (self.hasFromFort) {
    [output writeInt32:31 value:self.fromFort];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeFixed64Size(1, self.id);
  }
  if (self.hasPokemonId) {
    size_ += computeEnumSize(2, self.pokemonId);
  }
  if (self.hasCp) {
    size_ += computeInt32Size(3, self.cp);
  }
  if (self.hasStamina) {
    size_ += computeInt32Size(4, self.stamina);
  }
  if (self.hasStaminaMax) {
    size_ += computeInt32Size(5, self.staminaMax);
  }
  if (self.hasMove1) {
    size_ += computeDataSize(6, self.move1);
  }
  if (self.hasMove2) {
    size_ += computeDataSize(7, self.move2);
  }
  if (self.hasDeployedFortId) {
    size_ += computeInt32Size(8, self.deployedFortId);
  }
  if (self.hasOwnerName) {
    size_ += computeStringSize(9, self.ownerName);
  }
  if (self.hasIsEgg) {
    size_ += computeBoolSize(10, self.isEgg);
  }
  if (self.hasEggKmWalkedTarget) {
    size_ += computeInt32Size(11, self.eggKmWalkedTarget);
  }
  if (self.hasEggKmWalkedStart) {
    size_ += computeInt32Size(12, self.eggKmWalkedStart);
  }
  if (self.hasOrigin) {
    size_ += computeInt32Size(14, self.origin);
  }
  if (self.hasHeightM) {
    size_ += computeFloatSize(15, self.heightM);
  }
  if (self.hasWeightKg) {
    size_ += computeFloatSize(16, self.weightKg);
  }
  if (self.hasIndividualAttack) {
    size_ += computeInt32Size(17, self.individualAttack);
  }
  if (self.hasIndividualDefense) {
    size_ += computeInt32Size(18, self.individualDefense);
  }
  if (self.hasIndividualStamina) {
    size_ += computeInt32Size(19, self.individualStamina);
  }
  if (self.hasCpMultiplier) {
    size_ += computeInt32Size(20, self.cpMultiplier);
  }
  if (self.hasPokeball) {
    size_ += computeInt32Size(21, self.pokeball);
  }
  if (self.hasCapturedCellId) {
    size_ += computeUInt64Size(22, self.capturedCellId);
  }
  if (self.hasBattlesAttacked) {
    size_ += computeInt32Size(23, self.battlesAttacked);
  }
  if (self.hasBattlesDefended) {
    size_ += computeInt32Size(24, self.battlesDefended);
  }
  if (self.hasEggIncubatorId) {
    size_ += computeInt32Size(25, self.eggIncubatorId);
  }
  if (self.hasCreationTimeMs) {
    size_ += computeUInt64Size(26, self.creationTimeMs);
  }
  if (self.hasNumUpgrades) {
    size_ += computeInt32Size(27, self.numUpgrades);
  }
  if (self.hasAdditionalCpMultiplier) {
    size_ += computeInt32Size(28, self.additionalCpMultiplier);
  }
  if (self.hasFavorite) {
    size_ += computeInt32Size(29, self.favorite);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(30, self.nickname);
  }
  if (self.hasFromFort) {
    size_ += computeInt32Size(31, self.fromFort);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PokemonData*) parseFromData:(NSData*) data {
  return (PokemonData*)[[[PokemonData builder] mergeFromData:data] build];
}
+ (PokemonData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PokemonData*)[[[PokemonData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PokemonData*) parseFromInputStream:(NSInputStream*) input {
  return (PokemonData*)[[[PokemonData builder] mergeFromInputStream:input] build];
}
+ (PokemonData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PokemonData*)[[[PokemonData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PokemonData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PokemonData*)[[[PokemonData builder] mergeFromCodedInputStream:input] build];
}
+ (PokemonData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PokemonData*)[[[PokemonData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PokemonDataBuilder*) builder {
  return [[PokemonDataBuilder alloc] init];
}
+ (PokemonDataBuilder*) builderWithPrototype:(PokemonData*) prototype {
  return [[PokemonData builder] mergeFrom:prototype];
}
- (PokemonDataBuilder*) builder {
  return [PokemonData builder];
}
- (PokemonDataBuilder*) toBuilder {
  return [PokemonData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasPokemonId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pokemonId", NSStringFromPokemonId(self.pokemonId)];
  }
  if (self.hasCp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cp", [NSNumber numberWithInteger:self.cp]];
  }
  if (self.hasStamina) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stamina", [NSNumber numberWithInteger:self.stamina]];
  }
  if (self.hasStaminaMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"staminaMax", [NSNumber numberWithInteger:self.staminaMax]];
  }
  if (self.hasMove1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"move1", self.move1];
  }
  if (self.hasMove2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"move2", self.move2];
  }
  if (self.hasDeployedFortId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deployedFortId", [NSNumber numberWithInteger:self.deployedFortId]];
  }
  if (self.hasOwnerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerName", self.ownerName];
  }
  if (self.hasIsEgg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isEgg", [NSNumber numberWithBool:self.isEgg]];
  }
  if (self.hasEggKmWalkedTarget) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eggKmWalkedTarget", [NSNumber numberWithInteger:self.eggKmWalkedTarget]];
  }
  if (self.hasEggKmWalkedStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eggKmWalkedStart", [NSNumber numberWithInteger:self.eggKmWalkedStart]];
  }
  if (self.hasOrigin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"origin", [NSNumber numberWithInteger:self.origin]];
  }
  if (self.hasHeightM) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heightM", [NSNumber numberWithFloat:self.heightM]];
  }
  if (self.hasWeightKg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weightKg", [NSNumber numberWithFloat:self.weightKg]];
  }
  if (self.hasIndividualAttack) {
    [output appendFormat:@"%@%@: %@\n", indent, @"individualAttack", [NSNumber numberWithInteger:self.individualAttack]];
  }
  if (self.hasIndividualDefense) {
    [output appendFormat:@"%@%@: %@\n", indent, @"individualDefense", [NSNumber numberWithInteger:self.individualDefense]];
  }
  if (self.hasIndividualStamina) {
    [output appendFormat:@"%@%@: %@\n", indent, @"individualStamina", [NSNumber numberWithInteger:self.individualStamina]];
  }
  if (self.hasCpMultiplier) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cpMultiplier", [NSNumber numberWithInteger:self.cpMultiplier]];
  }
  if (self.hasPokeball) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pokeball", [NSNumber numberWithInteger:self.pokeball]];
  }
  if (self.hasCapturedCellId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"capturedCellId", [NSNumber numberWithLongLong:self.capturedCellId]];
  }
  if (self.hasBattlesAttacked) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battlesAttacked", [NSNumber numberWithInteger:self.battlesAttacked]];
  }
  if (self.hasBattlesDefended) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battlesDefended", [NSNumber numberWithInteger:self.battlesDefended]];
  }
  if (self.hasEggIncubatorId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eggIncubatorId", [NSNumber numberWithInteger:self.eggIncubatorId]];
  }
  if (self.hasCreationTimeMs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"creationTimeMs", [NSNumber numberWithLongLong:self.creationTimeMs]];
  }
  if (self.hasNumUpgrades) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numUpgrades", [NSNumber numberWithInteger:self.numUpgrades]];
  }
  if (self.hasAdditionalCpMultiplier) {
    [output appendFormat:@"%@%@: %@\n", indent, @"additionalCpMultiplier", [NSNumber numberWithInteger:self.additionalCpMultiplier]];
  }
  if (self.hasFavorite) {
    [output appendFormat:@"%@%@: %@\n", indent, @"favorite", [NSNumber numberWithInteger:self.favorite]];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasFromFort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromFort", [NSNumber numberWithInteger:self.fromFort]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasPokemonId) {
    [dictionary setObject: @(self.pokemonId) forKey: @"pokemonId"];
  }
  if (self.hasCp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cp] forKey: @"cp"];
  }
  if (self.hasStamina) {
    [dictionary setObject: [NSNumber numberWithInteger:self.stamina] forKey: @"stamina"];
  }
  if (self.hasStaminaMax) {
    [dictionary setObject: [NSNumber numberWithInteger:self.staminaMax] forKey: @"staminaMax"];
  }
  if (self.hasMove1) {
    [dictionary setObject: self.move1 forKey: @"move1"];
  }
  if (self.hasMove2) {
    [dictionary setObject: self.move2 forKey: @"move2"];
  }
  if (self.hasDeployedFortId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.deployedFortId] forKey: @"deployedFortId"];
  }
  if (self.hasOwnerName) {
    [dictionary setObject: self.ownerName forKey: @"ownerName"];
  }
  if (self.hasIsEgg) {
    [dictionary setObject: [NSNumber numberWithBool:self.isEgg] forKey: @"isEgg"];
  }
  if (self.hasEggKmWalkedTarget) {
    [dictionary setObject: [NSNumber numberWithInteger:self.eggKmWalkedTarget] forKey: @"eggKmWalkedTarget"];
  }
  if (self.hasEggKmWalkedStart) {
    [dictionary setObject: [NSNumber numberWithInteger:self.eggKmWalkedStart] forKey: @"eggKmWalkedStart"];
  }
  if (self.hasOrigin) {
    [dictionary setObject: [NSNumber numberWithInteger:self.origin] forKey: @"origin"];
  }
  if (self.hasHeightM) {
    [dictionary setObject: [NSNumber numberWithFloat:self.heightM] forKey: @"heightM"];
  }
  if (self.hasWeightKg) {
    [dictionary setObject: [NSNumber numberWithFloat:self.weightKg] forKey: @"weightKg"];
  }
  if (self.hasIndividualAttack) {
    [dictionary setObject: [NSNumber numberWithInteger:self.individualAttack] forKey: @"individualAttack"];
  }
  if (self.hasIndividualDefense) {
    [dictionary setObject: [NSNumber numberWithInteger:self.individualDefense] forKey: @"individualDefense"];
  }
  if (self.hasIndividualStamina) {
    [dictionary setObject: [NSNumber numberWithInteger:self.individualStamina] forKey: @"individualStamina"];
  }
  if (self.hasCpMultiplier) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cpMultiplier] forKey: @"cpMultiplier"];
  }
  if (self.hasPokeball) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pokeball] forKey: @"pokeball"];
  }
  if (self.hasCapturedCellId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.capturedCellId] forKey: @"capturedCellId"];
  }
  if (self.hasBattlesAttacked) {
    [dictionary setObject: [NSNumber numberWithInteger:self.battlesAttacked] forKey: @"battlesAttacked"];
  }
  if (self.hasBattlesDefended) {
    [dictionary setObject: [NSNumber numberWithInteger:self.battlesDefended] forKey: @"battlesDefended"];
  }
  if (self.hasEggIncubatorId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.eggIncubatorId] forKey: @"eggIncubatorId"];
  }
  if (self.hasCreationTimeMs) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.creationTimeMs] forKey: @"creationTimeMs"];
  }
  if (self.hasNumUpgrades) {
    [dictionary setObject: [NSNumber numberWithInteger:self.numUpgrades] forKey: @"numUpgrades"];
  }
  if (self.hasAdditionalCpMultiplier) {
    [dictionary setObject: [NSNumber numberWithInteger:self.additionalCpMultiplier] forKey: @"additionalCpMultiplier"];
  }
  if (self.hasFavorite) {
    [dictionary setObject: [NSNumber numberWithInteger:self.favorite] forKey: @"favorite"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  if (self.hasFromFort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromFort] forKey: @"fromFort"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PokemonData class]]) {
    return NO;
  }
  PokemonData *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPokemonId == otherMessage.hasPokemonId &&
      (!self.hasPokemonId || self.pokemonId == otherMessage.pokemonId) &&
      self.hasCp == otherMessage.hasCp &&
      (!self.hasCp || self.cp == otherMessage.cp) &&
      self.hasStamina == otherMessage.hasStamina &&
      (!self.hasStamina || self.stamina == otherMessage.stamina) &&
      self.hasStaminaMax == otherMessage.hasStaminaMax &&
      (!self.hasStaminaMax || self.staminaMax == otherMessage.staminaMax) &&
      self.hasMove1 == otherMessage.hasMove1 &&
      (!self.hasMove1 || [self.move1 isEqual:otherMessage.move1]) &&
      self.hasMove2 == otherMessage.hasMove2 &&
      (!self.hasMove2 || [self.move2 isEqual:otherMessage.move2]) &&
      self.hasDeployedFortId == otherMessage.hasDeployedFortId &&
      (!self.hasDeployedFortId || self.deployedFortId == otherMessage.deployedFortId) &&
      self.hasOwnerName == otherMessage.hasOwnerName &&
      (!self.hasOwnerName || [self.ownerName isEqual:otherMessage.ownerName]) &&
      self.hasIsEgg == otherMessage.hasIsEgg &&
      (!self.hasIsEgg || self.isEgg == otherMessage.isEgg) &&
      self.hasEggKmWalkedTarget == otherMessage.hasEggKmWalkedTarget &&
      (!self.hasEggKmWalkedTarget || self.eggKmWalkedTarget == otherMessage.eggKmWalkedTarget) &&
      self.hasEggKmWalkedStart == otherMessage.hasEggKmWalkedStart &&
      (!self.hasEggKmWalkedStart || self.eggKmWalkedStart == otherMessage.eggKmWalkedStart) &&
      self.hasOrigin == otherMessage.hasOrigin &&
      (!self.hasOrigin || self.origin == otherMessage.origin) &&
      self.hasHeightM == otherMessage.hasHeightM &&
      (!self.hasHeightM || self.heightM == otherMessage.heightM) &&
      self.hasWeightKg == otherMessage.hasWeightKg &&
      (!self.hasWeightKg || self.weightKg == otherMessage.weightKg) &&
      self.hasIndividualAttack == otherMessage.hasIndividualAttack &&
      (!self.hasIndividualAttack || self.individualAttack == otherMessage.individualAttack) &&
      self.hasIndividualDefense == otherMessage.hasIndividualDefense &&
      (!self.hasIndividualDefense || self.individualDefense == otherMessage.individualDefense) &&
      self.hasIndividualStamina == otherMessage.hasIndividualStamina &&
      (!self.hasIndividualStamina || self.individualStamina == otherMessage.individualStamina) &&
      self.hasCpMultiplier == otherMessage.hasCpMultiplier &&
      (!self.hasCpMultiplier || self.cpMultiplier == otherMessage.cpMultiplier) &&
      self.hasPokeball == otherMessage.hasPokeball &&
      (!self.hasPokeball || self.pokeball == otherMessage.pokeball) &&
      self.hasCapturedCellId == otherMessage.hasCapturedCellId &&
      (!self.hasCapturedCellId || self.capturedCellId == otherMessage.capturedCellId) &&
      self.hasBattlesAttacked == otherMessage.hasBattlesAttacked &&
      (!self.hasBattlesAttacked || self.battlesAttacked == otherMessage.battlesAttacked) &&
      self.hasBattlesDefended == otherMessage.hasBattlesDefended &&
      (!self.hasBattlesDefended || self.battlesDefended == otherMessage.battlesDefended) &&
      self.hasEggIncubatorId == otherMessage.hasEggIncubatorId &&
      (!self.hasEggIncubatorId || self.eggIncubatorId == otherMessage.eggIncubatorId) &&
      self.hasCreationTimeMs == otherMessage.hasCreationTimeMs &&
      (!self.hasCreationTimeMs || self.creationTimeMs == otherMessage.creationTimeMs) &&
      self.hasNumUpgrades == otherMessage.hasNumUpgrades &&
      (!self.hasNumUpgrades || self.numUpgrades == otherMessage.numUpgrades) &&
      self.hasAdditionalCpMultiplier == otherMessage.hasAdditionalCpMultiplier &&
      (!self.hasAdditionalCpMultiplier || self.additionalCpMultiplier == otherMessage.additionalCpMultiplier) &&
      self.hasFavorite == otherMessage.hasFavorite &&
      (!self.hasFavorite || self.favorite == otherMessage.favorite) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasFromFort == otherMessage.hasFromFort &&
      (!self.hasFromFort || self.fromFort == otherMessage.fromFort) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasPokemonId) {
    hashCode = hashCode * 31 + self.pokemonId;
  }
  if (self.hasCp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cp] hash];
  }
  if (self.hasStamina) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stamina] hash];
  }
  if (self.hasStaminaMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.staminaMax] hash];
  }
  if (self.hasMove1) {
    hashCode = hashCode * 31 + [self.move1 hash];
  }
  if (self.hasMove2) {
    hashCode = hashCode * 31 + [self.move2 hash];
  }
  if (self.hasDeployedFortId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deployedFortId] hash];
  }
  if (self.hasOwnerName) {
    hashCode = hashCode * 31 + [self.ownerName hash];
  }
  if (self.hasIsEgg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isEgg] hash];
  }
  if (self.hasEggKmWalkedTarget) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eggKmWalkedTarget] hash];
  }
  if (self.hasEggKmWalkedStart) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eggKmWalkedStart] hash];
  }
  if (self.hasOrigin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.origin] hash];
  }
  if (self.hasHeightM) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.heightM] hash];
  }
  if (self.hasWeightKg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.weightKg] hash];
  }
  if (self.hasIndividualAttack) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.individualAttack] hash];
  }
  if (self.hasIndividualDefense) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.individualDefense] hash];
  }
  if (self.hasIndividualStamina) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.individualStamina] hash];
  }
  if (self.hasCpMultiplier) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cpMultiplier] hash];
  }
  if (self.hasPokeball) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pokeball] hash];
  }
  if (self.hasCapturedCellId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.capturedCellId] hash];
  }
  if (self.hasBattlesAttacked) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.battlesAttacked] hash];
  }
  if (self.hasBattlesDefended) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.battlesDefended] hash];
  }
  if (self.hasEggIncubatorId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eggIncubatorId] hash];
  }
  if (self.hasCreationTimeMs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.creationTimeMs] hash];
  }
  if (self.hasNumUpgrades) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numUpgrades] hash];
  }
  if (self.hasAdditionalCpMultiplier) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.additionalCpMultiplier] hash];
  }
  if (self.hasFavorite) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.favorite] hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasFromFort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromFort] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PokemonDataBuilder()
@property (strong) PokemonData* resultPokemonData;
@end

@implementation PokemonDataBuilder
@synthesize resultPokemonData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPokemonData = [[PokemonData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPokemonData;
}
- (PokemonDataBuilder*) clear {
  self.resultPokemonData = [[PokemonData alloc] init];
  return self;
}
- (PokemonDataBuilder*) clone {
  return [PokemonData builderWithPrototype:resultPokemonData];
}
- (PokemonData*) defaultInstance {
  return [PokemonData defaultInstance];
}
- (PokemonData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PokemonData*) buildPartial {
  PokemonData* returnMe = resultPokemonData;
  self.resultPokemonData = nil;
  return returnMe;
}
- (PokemonDataBuilder*) mergeFrom:(PokemonData*) other {
  if (other == [PokemonData defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPokemonId) {
    [self setPokemonId:other.pokemonId];
  }
  if (other.hasCp) {
    [self setCp:other.cp];
  }
  if (other.hasStamina) {
    [self setStamina:other.stamina];
  }
  if (other.hasStaminaMax) {
    [self setStaminaMax:other.staminaMax];
  }
  if (other.hasMove1) {
    [self setMove1:other.move1];
  }
  if (other.hasMove2) {
    [self setMove2:other.move2];
  }
  if (other.hasDeployedFortId) {
    [self setDeployedFortId:other.deployedFortId];
  }
  if (other.hasOwnerName) {
    [self setOwnerName:other.ownerName];
  }
  if (other.hasIsEgg) {
    [self setIsEgg:other.isEgg];
  }
  if (other.hasEggKmWalkedTarget) {
    [self setEggKmWalkedTarget:other.eggKmWalkedTarget];
  }
  if (other.hasEggKmWalkedStart) {
    [self setEggKmWalkedStart:other.eggKmWalkedStart];
  }
  if (other.hasOrigin) {
    [self setOrigin:other.origin];
  }
  if (other.hasHeightM) {
    [self setHeightM:other.heightM];
  }
  if (other.hasWeightKg) {
    [self setWeightKg:other.weightKg];
  }
  if (other.hasIndividualAttack) {
    [self setIndividualAttack:other.individualAttack];
  }
  if (other.hasIndividualDefense) {
    [self setIndividualDefense:other.individualDefense];
  }
  if (other.hasIndividualStamina) {
    [self setIndividualStamina:other.individualStamina];
  }
  if (other.hasCpMultiplier) {
    [self setCpMultiplier:other.cpMultiplier];
  }
  if (other.hasPokeball) {
    [self setPokeball:other.pokeball];
  }
  if (other.hasCapturedCellId) {
    [self setCapturedCellId:other.capturedCellId];
  }
  if (other.hasBattlesAttacked) {
    [self setBattlesAttacked:other.battlesAttacked];
  }
  if (other.hasBattlesDefended) {
    [self setBattlesDefended:other.battlesDefended];
  }
  if (other.hasEggIncubatorId) {
    [self setEggIncubatorId:other.eggIncubatorId];
  }
  if (other.hasCreationTimeMs) {
    [self setCreationTimeMs:other.creationTimeMs];
  }
  if (other.hasNumUpgrades) {
    [self setNumUpgrades:other.numUpgrades];
  }
  if (other.hasAdditionalCpMultiplier) {
    [self setAdditionalCpMultiplier:other.additionalCpMultiplier];
  }
  if (other.hasFavorite) {
    [self setFavorite:other.favorite];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasFromFort) {
    [self setFromFort:other.fromFort];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PokemonDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PokemonDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setId:[input readFixed64]];
        break;
      }
      case 16: {
        PokemonId value = (PokemonId)[input readEnum];
        if (PokemonIdIsValidValue(value)) {
          [self setPokemonId:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setCp:[input readInt32]];
        break;
      }
      case 32: {
        [self setStamina:[input readInt32]];
        break;
      }
      case 40: {
        [self setStaminaMax:[input readInt32]];
        break;
      }
      case 50: {
        [self setMove1:[input readData]];
        break;
      }
      case 58: {
        [self setMove2:[input readData]];
        break;
      }
      case 64: {
        [self setDeployedFortId:[input readInt32]];
        break;
      }
      case 74: {
        [self setOwnerName:[input readString]];
        break;
      }
      case 80: {
        [self setIsEgg:[input readBool]];
        break;
      }
      case 88: {
        [self setEggKmWalkedTarget:[input readInt32]];
        break;
      }
      case 96: {
        [self setEggKmWalkedStart:[input readInt32]];
        break;
      }
      case 112: {
        [self setOrigin:[input readInt32]];
        break;
      }
      case 125: {
        [self setHeightM:[input readFloat]];
        break;
      }
      case 133: {
        [self setWeightKg:[input readFloat]];
        break;
      }
      case 136: {
        [self setIndividualAttack:[input readInt32]];
        break;
      }
      case 144: {
        [self setIndividualDefense:[input readInt32]];
        break;
      }
      case 152: {
        [self setIndividualStamina:[input readInt32]];
        break;
      }
      case 160: {
        [self setCpMultiplier:[input readInt32]];
        break;
      }
      case 168: {
        [self setPokeball:[input readInt32]];
        break;
      }
      case 176: {
        [self setCapturedCellId:[input readUInt64]];
        break;
      }
      case 184: {
        [self setBattlesAttacked:[input readInt32]];
        break;
      }
      case 192: {
        [self setBattlesDefended:[input readInt32]];
        break;
      }
      case 200: {
        [self setEggIncubatorId:[input readInt32]];
        break;
      }
      case 208: {
        [self setCreationTimeMs:[input readUInt64]];
        break;
      }
      case 216: {
        [self setNumUpgrades:[input readInt32]];
        break;
      }
      case 224: {
        [self setAdditionalCpMultiplier:[input readInt32]];
        break;
      }
      case 232: {
        [self setFavorite:[input readInt32]];
        break;
      }
      case 242: {
        [self setNickname:[input readString]];
        break;
      }
      case 248: {
        [self setFromFort:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultPokemonData.hasId;
}
- (UInt64) id {
  return resultPokemonData.id;
}
- (PokemonDataBuilder*) setId:(UInt64) value {
  resultPokemonData.hasId = YES;
  resultPokemonData.id = value;
  return self;
}
- (PokemonDataBuilder*) clearId {
  resultPokemonData.hasId = NO;
  resultPokemonData.id = 0L;
  return self;
}
- (BOOL) hasPokemonId {
  return resultPokemonData.hasPokemonId;
}
- (PokemonId) pokemonId {
  return resultPokemonData.pokemonId;
}
- (PokemonDataBuilder*) setPokemonId:(PokemonId) value {
  resultPokemonData.hasPokemonId = YES;
  resultPokemonData.pokemonId = value;
  return self;
}
- (PokemonDataBuilder*) clearPokemonId {
  resultPokemonData.hasPokemonId = NO;
  resultPokemonData.pokemonId = PokemonIdMissingno;
  return self;
}
- (BOOL) hasCp {
  return resultPokemonData.hasCp;
}
- (SInt32) cp {
  return resultPokemonData.cp;
}
- (PokemonDataBuilder*) setCp:(SInt32) value {
  resultPokemonData.hasCp = YES;
  resultPokemonData.cp = value;
  return self;
}
- (PokemonDataBuilder*) clearCp {
  resultPokemonData.hasCp = NO;
  resultPokemonData.cp = 0;
  return self;
}
- (BOOL) hasStamina {
  return resultPokemonData.hasStamina;
}
- (SInt32) stamina {
  return resultPokemonData.stamina;
}
- (PokemonDataBuilder*) setStamina:(SInt32) value {
  resultPokemonData.hasStamina = YES;
  resultPokemonData.stamina = value;
  return self;
}
- (PokemonDataBuilder*) clearStamina {
  resultPokemonData.hasStamina = NO;
  resultPokemonData.stamina = 0;
  return self;
}
- (BOOL) hasStaminaMax {
  return resultPokemonData.hasStaminaMax;
}
- (SInt32) staminaMax {
  return resultPokemonData.staminaMax;
}
- (PokemonDataBuilder*) setStaminaMax:(SInt32) value {
  resultPokemonData.hasStaminaMax = YES;
  resultPokemonData.staminaMax = value;
  return self;
}
- (PokemonDataBuilder*) clearStaminaMax {
  resultPokemonData.hasStaminaMax = NO;
  resultPokemonData.staminaMax = 0;
  return self;
}
- (BOOL) hasMove1 {
  return resultPokemonData.hasMove1;
}
- (NSData*) move1 {
  return resultPokemonData.move1;
}
- (PokemonDataBuilder*) setMove1:(NSData*) value {
  resultPokemonData.hasMove1 = YES;
  resultPokemonData.move1 = value;
  return self;
}
- (PokemonDataBuilder*) clearMove1 {
  resultPokemonData.hasMove1 = NO;
  resultPokemonData.move1 = [NSData data];
  return self;
}
- (BOOL) hasMove2 {
  return resultPokemonData.hasMove2;
}
- (NSData*) move2 {
  return resultPokemonData.move2;
}
- (PokemonDataBuilder*) setMove2:(NSData*) value {
  resultPokemonData.hasMove2 = YES;
  resultPokemonData.move2 = value;
  return self;
}
- (PokemonDataBuilder*) clearMove2 {
  resultPokemonData.hasMove2 = NO;
  resultPokemonData.move2 = [NSData data];
  return self;
}
- (BOOL) hasDeployedFortId {
  return resultPokemonData.hasDeployedFortId;
}
- (SInt32) deployedFortId {
  return resultPokemonData.deployedFortId;
}
- (PokemonDataBuilder*) setDeployedFortId:(SInt32) value {
  resultPokemonData.hasDeployedFortId = YES;
  resultPokemonData.deployedFortId = value;
  return self;
}
- (PokemonDataBuilder*) clearDeployedFortId {
  resultPokemonData.hasDeployedFortId = NO;
  resultPokemonData.deployedFortId = 0;
  return self;
}
- (BOOL) hasOwnerName {
  return resultPokemonData.hasOwnerName;
}
- (NSString*) ownerName {
  return resultPokemonData.ownerName;
}
- (PokemonDataBuilder*) setOwnerName:(NSString*) value {
  resultPokemonData.hasOwnerName = YES;
  resultPokemonData.ownerName = value;
  return self;
}
- (PokemonDataBuilder*) clearOwnerName {
  resultPokemonData.hasOwnerName = NO;
  resultPokemonData.ownerName = @"";
  return self;
}
- (BOOL) hasIsEgg {
  return resultPokemonData.hasIsEgg;
}
- (BOOL) isEgg {
  return resultPokemonData.isEgg;
}
- (PokemonDataBuilder*) setIsEgg:(BOOL) value {
  resultPokemonData.hasIsEgg = YES;
  resultPokemonData.isEgg = value;
  return self;
}
- (PokemonDataBuilder*) clearIsEgg {
  resultPokemonData.hasIsEgg = NO;
  resultPokemonData.isEgg = NO;
  return self;
}
- (BOOL) hasEggKmWalkedTarget {
  return resultPokemonData.hasEggKmWalkedTarget;
}
- (SInt32) eggKmWalkedTarget {
  return resultPokemonData.eggKmWalkedTarget;
}
- (PokemonDataBuilder*) setEggKmWalkedTarget:(SInt32) value {
  resultPokemonData.hasEggKmWalkedTarget = YES;
  resultPokemonData.eggKmWalkedTarget = value;
  return self;
}
- (PokemonDataBuilder*) clearEggKmWalkedTarget {
  resultPokemonData.hasEggKmWalkedTarget = NO;
  resultPokemonData.eggKmWalkedTarget = 0;
  return self;
}
- (BOOL) hasEggKmWalkedStart {
  return resultPokemonData.hasEggKmWalkedStart;
}
- (SInt32) eggKmWalkedStart {
  return resultPokemonData.eggKmWalkedStart;
}
- (PokemonDataBuilder*) setEggKmWalkedStart:(SInt32) value {
  resultPokemonData.hasEggKmWalkedStart = YES;
  resultPokemonData.eggKmWalkedStart = value;
  return self;
}
- (PokemonDataBuilder*) clearEggKmWalkedStart {
  resultPokemonData.hasEggKmWalkedStart = NO;
  resultPokemonData.eggKmWalkedStart = 0;
  return self;
}
- (BOOL) hasOrigin {
  return resultPokemonData.hasOrigin;
}
- (SInt32) origin {
  return resultPokemonData.origin;
}
- (PokemonDataBuilder*) setOrigin:(SInt32) value {
  resultPokemonData.hasOrigin = YES;
  resultPokemonData.origin = value;
  return self;
}
- (PokemonDataBuilder*) clearOrigin {
  resultPokemonData.hasOrigin = NO;
  resultPokemonData.origin = 0;
  return self;
}
- (BOOL) hasHeightM {
  return resultPokemonData.hasHeightM;
}
- (Float32) heightM {
  return resultPokemonData.heightM;
}
- (PokemonDataBuilder*) setHeightM:(Float32) value {
  resultPokemonData.hasHeightM = YES;
  resultPokemonData.heightM = value;
  return self;
}
- (PokemonDataBuilder*) clearHeightM {
  resultPokemonData.hasHeightM = NO;
  resultPokemonData.heightM = 0;
  return self;
}
- (BOOL) hasWeightKg {
  return resultPokemonData.hasWeightKg;
}
- (Float32) weightKg {
  return resultPokemonData.weightKg;
}
- (PokemonDataBuilder*) setWeightKg:(Float32) value {
  resultPokemonData.hasWeightKg = YES;
  resultPokemonData.weightKg = value;
  return self;
}
- (PokemonDataBuilder*) clearWeightKg {
  resultPokemonData.hasWeightKg = NO;
  resultPokemonData.weightKg = 0;
  return self;
}
- (BOOL) hasIndividualAttack {
  return resultPokemonData.hasIndividualAttack;
}
- (SInt32) individualAttack {
  return resultPokemonData.individualAttack;
}
- (PokemonDataBuilder*) setIndividualAttack:(SInt32) value {
  resultPokemonData.hasIndividualAttack = YES;
  resultPokemonData.individualAttack = value;
  return self;
}
- (PokemonDataBuilder*) clearIndividualAttack {
  resultPokemonData.hasIndividualAttack = NO;
  resultPokemonData.individualAttack = 0;
  return self;
}
- (BOOL) hasIndividualDefense {
  return resultPokemonData.hasIndividualDefense;
}
- (SInt32) individualDefense {
  return resultPokemonData.individualDefense;
}
- (PokemonDataBuilder*) setIndividualDefense:(SInt32) value {
  resultPokemonData.hasIndividualDefense = YES;
  resultPokemonData.individualDefense = value;
  return self;
}
- (PokemonDataBuilder*) clearIndividualDefense {
  resultPokemonData.hasIndividualDefense = NO;
  resultPokemonData.individualDefense = 0;
  return self;
}
- (BOOL) hasIndividualStamina {
  return resultPokemonData.hasIndividualStamina;
}
- (SInt32) individualStamina {
  return resultPokemonData.individualStamina;
}
- (PokemonDataBuilder*) setIndividualStamina:(SInt32) value {
  resultPokemonData.hasIndividualStamina = YES;
  resultPokemonData.individualStamina = value;
  return self;
}
- (PokemonDataBuilder*) clearIndividualStamina {
  resultPokemonData.hasIndividualStamina = NO;
  resultPokemonData.individualStamina = 0;
  return self;
}
- (BOOL) hasCpMultiplier {
  return resultPokemonData.hasCpMultiplier;
}
- (SInt32) cpMultiplier {
  return resultPokemonData.cpMultiplier;
}
- (PokemonDataBuilder*) setCpMultiplier:(SInt32) value {
  resultPokemonData.hasCpMultiplier = YES;
  resultPokemonData.cpMultiplier = value;
  return self;
}
- (PokemonDataBuilder*) clearCpMultiplier {
  resultPokemonData.hasCpMultiplier = NO;
  resultPokemonData.cpMultiplier = 0;
  return self;
}
- (BOOL) hasPokeball {
  return resultPokemonData.hasPokeball;
}
- (SInt32) pokeball {
  return resultPokemonData.pokeball;
}
- (PokemonDataBuilder*) setPokeball:(SInt32) value {
  resultPokemonData.hasPokeball = YES;
  resultPokemonData.pokeball = value;
  return self;
}
- (PokemonDataBuilder*) clearPokeball {
  resultPokemonData.hasPokeball = NO;
  resultPokemonData.pokeball = 0;
  return self;
}
- (BOOL) hasCapturedCellId {
  return resultPokemonData.hasCapturedCellId;
}
- (UInt64) capturedCellId {
  return resultPokemonData.capturedCellId;
}
- (PokemonDataBuilder*) setCapturedCellId:(UInt64) value {
  resultPokemonData.hasCapturedCellId = YES;
  resultPokemonData.capturedCellId = value;
  return self;
}
- (PokemonDataBuilder*) clearCapturedCellId {
  resultPokemonData.hasCapturedCellId = NO;
  resultPokemonData.capturedCellId = 0L;
  return self;
}
- (BOOL) hasBattlesAttacked {
  return resultPokemonData.hasBattlesAttacked;
}
- (SInt32) battlesAttacked {
  return resultPokemonData.battlesAttacked;
}
- (PokemonDataBuilder*) setBattlesAttacked:(SInt32) value {
  resultPokemonData.hasBattlesAttacked = YES;
  resultPokemonData.battlesAttacked = value;
  return self;
}
- (PokemonDataBuilder*) clearBattlesAttacked {
  resultPokemonData.hasBattlesAttacked = NO;
  resultPokemonData.battlesAttacked = 0;
  return self;
}
- (BOOL) hasBattlesDefended {
  return resultPokemonData.hasBattlesDefended;
}
- (SInt32) battlesDefended {
  return resultPokemonData.battlesDefended;
}
- (PokemonDataBuilder*) setBattlesDefended:(SInt32) value {
  resultPokemonData.hasBattlesDefended = YES;
  resultPokemonData.battlesDefended = value;
  return self;
}
- (PokemonDataBuilder*) clearBattlesDefended {
  resultPokemonData.hasBattlesDefended = NO;
  resultPokemonData.battlesDefended = 0;
  return self;
}
- (BOOL) hasEggIncubatorId {
  return resultPokemonData.hasEggIncubatorId;
}
- (SInt32) eggIncubatorId {
  return resultPokemonData.eggIncubatorId;
}
- (PokemonDataBuilder*) setEggIncubatorId:(SInt32) value {
  resultPokemonData.hasEggIncubatorId = YES;
  resultPokemonData.eggIncubatorId = value;
  return self;
}
- (PokemonDataBuilder*) clearEggIncubatorId {
  resultPokemonData.hasEggIncubatorId = NO;
  resultPokemonData.eggIncubatorId = 0;
  return self;
}
- (BOOL) hasCreationTimeMs {
  return resultPokemonData.hasCreationTimeMs;
}
- (UInt64) creationTimeMs {
  return resultPokemonData.creationTimeMs;
}
- (PokemonDataBuilder*) setCreationTimeMs:(UInt64) value {
  resultPokemonData.hasCreationTimeMs = YES;
  resultPokemonData.creationTimeMs = value;
  return self;
}
- (PokemonDataBuilder*) clearCreationTimeMs {
  resultPokemonData.hasCreationTimeMs = NO;
  resultPokemonData.creationTimeMs = 0L;
  return self;
}
- (BOOL) hasNumUpgrades {
  return resultPokemonData.hasNumUpgrades;
}
- (SInt32) numUpgrades {
  return resultPokemonData.numUpgrades;
}
- (PokemonDataBuilder*) setNumUpgrades:(SInt32) value {
  resultPokemonData.hasNumUpgrades = YES;
  resultPokemonData.numUpgrades = value;
  return self;
}
- (PokemonDataBuilder*) clearNumUpgrades {
  resultPokemonData.hasNumUpgrades = NO;
  resultPokemonData.numUpgrades = 0;
  return self;
}
- (BOOL) hasAdditionalCpMultiplier {
  return resultPokemonData.hasAdditionalCpMultiplier;
}
- (SInt32) additionalCpMultiplier {
  return resultPokemonData.additionalCpMultiplier;
}
- (PokemonDataBuilder*) setAdditionalCpMultiplier:(SInt32) value {
  resultPokemonData.hasAdditionalCpMultiplier = YES;
  resultPokemonData.additionalCpMultiplier = value;
  return self;
}
- (PokemonDataBuilder*) clearAdditionalCpMultiplier {
  resultPokemonData.hasAdditionalCpMultiplier = NO;
  resultPokemonData.additionalCpMultiplier = 0;
  return self;
}
- (BOOL) hasFavorite {
  return resultPokemonData.hasFavorite;
}
- (SInt32) favorite {
  return resultPokemonData.favorite;
}
- (PokemonDataBuilder*) setFavorite:(SInt32) value {
  resultPokemonData.hasFavorite = YES;
  resultPokemonData.favorite = value;
  return self;
}
- (PokemonDataBuilder*) clearFavorite {
  resultPokemonData.hasFavorite = NO;
  resultPokemonData.favorite = 0;
  return self;
}
- (BOOL) hasNickname {
  return resultPokemonData.hasNickname;
}
- (NSString*) nickname {
  return resultPokemonData.nickname;
}
- (PokemonDataBuilder*) setNickname:(NSString*) value {
  resultPokemonData.hasNickname = YES;
  resultPokemonData.nickname = value;
  return self;
}
- (PokemonDataBuilder*) clearNickname {
  resultPokemonData.hasNickname = NO;
  resultPokemonData.nickname = @"";
  return self;
}
- (BOOL) hasFromFort {
  return resultPokemonData.hasFromFort;
}
- (SInt32) fromFort {
  return resultPokemonData.fromFort;
}
- (PokemonDataBuilder*) setFromFort:(SInt32) value {
  resultPokemonData.hasFromFort = YES;
  resultPokemonData.fromFort = value;
  return self;
}
- (PokemonDataBuilder*) clearFromFort {
  resultPokemonData.hasFromFort = NO;
  resultPokemonData.fromFort = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
